{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/rxjs/_esm5/util/root.js","webpack:///./src/js/components/canvas.js","webpack:///./src/js/Constants.js","webpack:///./node_modules/rxjs/_esm5/util/isFunction.js","webpack:///./node_modules/rxjs/_esm5/util/isArray.js","webpack:///./node_modules/rxjs/_esm5/util/isObject.js","webpack:///./node_modules/rxjs/_esm5/util/errorObject.js","webpack:///./node_modules/rxjs/_esm5/util/tryCatch.js","webpack:///./node_modules/rxjs/_esm5/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/_esm5/Subscription.js","webpack:///./node_modules/rxjs/_esm5/Observer.js","webpack:///./node_modules/rxjs/_esm5/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/_esm5/Subscriber.js","webpack:///./node_modules/rxjs/_esm5/symbol/observable.js","webpack:///./node_modules/rxjs/_esm5/util/noop.js","webpack:///./node_modules/rxjs/_esm5/util/pipe.js","webpack:///./node_modules/rxjs/_esm5/Observable.js","webpack:///./node_modules/rxjs/_esm5/util/toSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/_esm5/SubjectSubscription.js","webpack:///./node_modules/rxjs/_esm5/Subject.js","webpack:///./node_modules/rxjs/_esm5/AsyncSubject.js","webpack:///./node_modules/rxjs/_esm5/observable/BoundCallbackObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/bindCallback.js","webpack:///./node_modules/rxjs/_esm5/add/observable/bindCallback.js","webpack:///./node_modules/rxjs/_esm5/observable/BoundNodeCallbackObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/_esm5/util/isScheduler.js","webpack:///./node_modules/rxjs/_esm5/add/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/_esm5/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/_esm5/OuterSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/isArrayLike.js","webpack:///./node_modules/rxjs/_esm5/util/isPromise.js","webpack:///./node_modules/rxjs/_esm5/symbol/iterator.js","webpack:///./node_modules/rxjs/_esm5/InnerSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/subscribeToResult.js","webpack:///./node_modules/rxjs/_esm5/operators/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/add/observable/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/observable/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/observable/of.js","webpack:///./node_modules/rxjs/_esm5/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/_esm5/Notification.js","webpack:///./node_modules/rxjs/_esm5/operators/observeOn.js","webpack:///./node_modules/rxjs/_esm5/observable/FromObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/from.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeMap.js","webpack:///./node_modules/rxjs/_esm5/util/identity.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeAll.js","webpack:///./node_modules/rxjs/_esm5/operators/concatAll.js","webpack:///./node_modules/rxjs/_esm5/observable/concat.js","webpack:///./node_modules/rxjs/_esm5/add/observable/concat.js","webpack:///./node_modules/rxjs/_esm5/observable/DeferObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/defer.js","webpack:///./node_modules/rxjs/_esm5/add/observable/defer.js","webpack:///./node_modules/rxjs/_esm5/observable/empty.js","webpack:///./node_modules/rxjs/_esm5/add/observable/empty.js","webpack:///./node_modules/rxjs/_esm5/observable/ForkJoinObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/forkJoin.js","webpack:///./node_modules/rxjs/_esm5/add/observable/forkJoin.js","webpack:///./node_modules/rxjs/_esm5/add/observable/from.js","webpack:///./node_modules/rxjs/_esm5/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/fromEvent.js","webpack:///./node_modules/rxjs/_esm5/add/observable/fromEvent.js","webpack:///./node_modules/rxjs/_esm5/observable/FromEventPatternObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/_esm5/add/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/_esm5/observable/fromPromise.js","webpack:///./node_modules/rxjs/_esm5/add/observable/fromPromise.js","webpack:///./node_modules/rxjs/_esm5/observable/GenerateObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/generate.js","webpack:///./node_modules/rxjs/_esm5/add/observable/generate.js","webpack:///./node_modules/rxjs/_esm5/observable/IfObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/if.js","webpack:///./node_modules/rxjs/_esm5/util/isNumeric.js","webpack:///./node_modules/rxjs/_esm5/add/observable/if.js","webpack:///./node_modules/rxjs/_esm5/scheduler/Action.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/_esm5/Scheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/async.js","webpack:///./node_modules/rxjs/_esm5/observable/IntervalObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/interval.js","webpack:///./node_modules/rxjs/_esm5/operators/merge.js","webpack:///./node_modules/rxjs/_esm5/add/observable/interval.js","webpack:///./node_modules/rxjs/_esm5/observable/merge.js","webpack:///./node_modules/rxjs/_esm5/add/observable/merge.js","webpack:///./node_modules/rxjs/_esm5/observable/race.js","webpack:///./node_modules/rxjs/_esm5/add/observable/race.js","webpack:///./node_modules/rxjs/_esm5/observable/NeverObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/never.js","webpack:///./node_modules/rxjs/_esm5/add/observable/never.js","webpack:///./node_modules/rxjs/_esm5/add/observable/of.js","webpack:///./node_modules/rxjs/_esm5/operators/onErrorResumeNext.js","webpack:///./node_modules/rxjs/_esm5/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/_esm5/add/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/_esm5/observable/PairsObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/pairs.js","webpack:///./node_modules/rxjs/_esm5/add/observable/pairs.js","webpack:///./node_modules/rxjs/_esm5/observable/RangeObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/range.js","webpack:///./node_modules/rxjs/_esm5/add/observable/range.js","webpack:///./node_modules/rxjs/_esm5/observable/UsingObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/using.js","webpack:///./node_modules/rxjs/_esm5/add/observable/using.js","webpack:///./node_modules/rxjs/_esm5/observable/ErrorObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/throw.js","webpack:///./node_modules/rxjs/_esm5/util/isDate.js","webpack:///./node_modules/rxjs/_esm5/add/observable/throw.js","webpack:///./node_modules/rxjs/_esm5/observable/TimerObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/timer.js","webpack:///./node_modules/rxjs/_esm5/add/observable/timer.js","webpack:///./node_modules/rxjs/_esm5/operators/zip.js","webpack:///./node_modules/rxjs/_esm5/observable/zip.js","webpack:///./node_modules/rxjs/_esm5/add/observable/zip.js","webpack:///./node_modules/rxjs/_esm5/operators/audit.js","webpack:///./node_modules/rxjs/_esm5/operators/auditTime.js","webpack:///./node_modules/rxjs/_esm5/operators/buffer.js","webpack:///./node_modules/rxjs/_esm5/operators/bufferCount.js","webpack:///./node_modules/rxjs/_esm5/operators/bufferTime.js","webpack:///./node_modules/rxjs/_esm5/operators/bufferToggle.js","webpack:///./node_modules/rxjs/_esm5/operators/bufferWhen.js","webpack:///./node_modules/rxjs/_esm5/operators/catchError.js","webpack:///./node_modules/rxjs/_esm5/operators/combineAll.js","webpack:///./node_modules/rxjs/_esm5/operators/concat.js","webpack:///./node_modules/rxjs/_esm5/operators/concatMap.js","webpack:///./node_modules/rxjs/_esm5/operators/concatMapTo.js","webpack:///./node_modules/rxjs/_esm5/operators/count.js","webpack:///./node_modules/rxjs/_esm5/operators/debounce.js","webpack:///./node_modules/rxjs/_esm5/operators/debounceTime.js","webpack:///./node_modules/rxjs/_esm5/operators/defaultIfEmpty.js","webpack:///./node_modules/rxjs/_esm5/operators/delay.js","webpack:///./node_modules/rxjs/_esm5/operators/delayWhen.js","webpack:///./node_modules/rxjs/_esm5/operators/dematerialize.js","webpack:///./node_modules/rxjs/_esm5/util/Set.js","webpack:///./node_modules/rxjs/_esm5/operators/distinct.js","webpack:///./node_modules/rxjs/_esm5/operators/distinctUntilChanged.js","webpack:///./node_modules/rxjs/_esm5/operators/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/_esm5/util/ArgumentOutOfRangeError.js","webpack:///./node_modules/rxjs/_esm5/operators/elementAt.js","webpack:///./node_modules/rxjs/_esm5/operators/every.js","webpack:///./node_modules/rxjs/_esm5/operators/exhaust.js","webpack:///./node_modules/rxjs/_esm5/operators/exhaustMap.js","webpack:///./node_modules/rxjs/_esm5/operators/expand.js","webpack:///./node_modules/rxjs/_esm5/operators/filter.js","webpack:///./node_modules/rxjs/_esm5/operators/finalize.js","webpack:///./node_modules/rxjs/_esm5/operators/find.js","webpack:///./node_modules/rxjs/_esm5/operators/findIndex.js","webpack:///./node_modules/rxjs/_esm5/util/EmptyError.js","webpack:///./node_modules/rxjs/_esm5/operators/first.js","webpack:///./node_modules/rxjs/_esm5/util/MapPolyfill.js","webpack:///./node_modules/rxjs/_esm5/util/Map.js","webpack:///./node_modules/rxjs/_esm5/util/FastMap.js","webpack:///./node_modules/rxjs/_esm5/operators/groupBy.js","webpack:///./node_modules/rxjs/_esm5/operators/ignoreElements.js","webpack:///./node_modules/rxjs/_esm5/operators/isEmpty.js","webpack:///./node_modules/rxjs/_esm5/operators/last.js","webpack:///./node_modules/rxjs/_esm5/operators/map.js","webpack:///./node_modules/rxjs/_esm5/operators/mapTo.js","webpack:///./node_modules/rxjs/_esm5/operators/materialize.js","webpack:///./node_modules/rxjs/_esm5/operators/scan.js","webpack:///./node_modules/rxjs/_esm5/operators/takeLast.js","webpack:///./node_modules/rxjs/_esm5/operators/reduce.js","webpack:///./node_modules/rxjs/_esm5/operators/max.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeMapTo.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeScan.js","webpack:///./node_modules/rxjs/_esm5/operators/min.js","webpack:///./node_modules/rxjs/_esm5/operators/refCount.js","webpack:///./node_modules/rxjs/_esm5/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/multicast.js","webpack:///./node_modules/rxjs/_esm5/operators/pairwise.js","webpack:///./node_modules/rxjs/_esm5/util/not.js","webpack:///./node_modules/rxjs/_esm5/operators/partition.js","webpack:///./node_modules/rxjs/_esm5/operators/pluck.js","webpack:///./node_modules/rxjs/_esm5/operators/publish.js","webpack:///./node_modules/rxjs/_esm5/BehaviorSubject.js","webpack:///./node_modules/rxjs/_esm5/operators/publishBehavior.js","webpack:///./node_modules/rxjs/_esm5/operators/publishLast.js","webpack:///./node_modules/rxjs/_esm5/scheduler/QueueAction.js","webpack:///./node_modules/rxjs/_esm5/scheduler/QueueScheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/queue.js","webpack:///./node_modules/rxjs/_esm5/ReplaySubject.js","webpack:///./node_modules/rxjs/_esm5/operators/publishReplay.js","webpack:///./node_modules/rxjs/_esm5/operators/race.js","webpack:///./node_modules/rxjs/_esm5/operators/repeat.js","webpack:///./node_modules/rxjs/_esm5/operators/repeatWhen.js","webpack:///./node_modules/rxjs/_esm5/operators/retry.js","webpack:///./node_modules/rxjs/_esm5/operators/retryWhen.js","webpack:///./node_modules/rxjs/_esm5/operators/sample.js","webpack:///./node_modules/rxjs/_esm5/operators/sampleTime.js","webpack:///./node_modules/rxjs/_esm5/operators/sequenceEqual.js","webpack:///./node_modules/rxjs/_esm5/operators/share.js","webpack:///./node_modules/rxjs/_esm5/operators/shareReplay.js","webpack:///./node_modules/rxjs/_esm5/operators/single.js","webpack:///./node_modules/rxjs/_esm5/operators/skip.js","webpack:///./node_modules/rxjs/_esm5/operators/skipLast.js","webpack:///./node_modules/rxjs/_esm5/operators/skipUntil.js","webpack:///./node_modules/rxjs/_esm5/operators/skipWhile.js","webpack:///./node_modules/rxjs/_esm5/operators/startWith.js","webpack:///./node_modules/rxjs/_esm5/operators/switchMap.js","webpack:///./node_modules/rxjs/_esm5/operators/switchAll.js","webpack:///./node_modules/rxjs/_esm5/operators/switchMapTo.js","webpack:///./node_modules/rxjs/_esm5/operators/take.js","webpack:///./node_modules/rxjs/_esm5/operators/takeUntil.js","webpack:///./node_modules/rxjs/_esm5/operators/takeWhile.js","webpack:///./node_modules/rxjs/_esm5/operators/tap.js","webpack:///./node_modules/rxjs/_esm5/operators/throttle.js","webpack:///./node_modules/rxjs/_esm5/operators/throttleTime.js","webpack:///./node_modules/rxjs/_esm5/operators/timeInterval.js","webpack:///./node_modules/rxjs/_esm5/util/TimeoutError.js","webpack:///./node_modules/rxjs/_esm5/operators/timeout.js","webpack:///./node_modules/rxjs/_esm5/operators/timeoutWith.js","webpack:///./node_modules/rxjs/_esm5/operators/timestamp.js","webpack:///./node_modules/rxjs/_esm5/operators/toArray.js","webpack:///./node_modules/rxjs/_esm5/operators/window.js","webpack:///./node_modules/rxjs/_esm5/operators/windowCount.js","webpack:///./node_modules/rxjs/_esm5/operators/windowTime.js","webpack:///./node_modules/rxjs/_esm5/operators/windowToggle.js","webpack:///./node_modules/rxjs/_esm5/operators/windowWhen.js","webpack:///./node_modules/rxjs/_esm5/operators/withLatestFrom.js","webpack:///./node_modules/rxjs/_esm5/operators/zipAll.js","webpack:///./node_modules/rxjs/_esm5/observable/dom/AjaxObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/dom/ajax.js","webpack:///./node_modules/rxjs/_esm5/util/assign.js","webpack:///./node_modules/rxjs/_esm5/add/observable/dom/ajax.js","webpack:///./node_modules/rxjs/_esm5/observable/dom/WebSocketSubject.js","webpack:///./node_modules/rxjs/_esm5/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/_esm5/operator/catch.js","webpack:///./node_modules/rxjs/_esm5/operator/do.js","webpack:///./node_modules/rxjs/_esm5/operator/finally.js","webpack:///./node_modules/rxjs/_esm5/operator/let.js","webpack:///./node_modules/rxjs/_esm5/operator/mergeMap.js","webpack:///./node_modules/rxjs/_esm5/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/_esm5/add/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/_esm5/add/operator/buffer.js","webpack:///./node_modules/rxjs/_esm5/operator/buffer.js","webpack:///./node_modules/rxjs/_esm5/add/operator/bufferCount.js","webpack:///./node_modules/rxjs/_esm5/operator/bufferCount.js","webpack:///./node_modules/rxjs/_esm5/add/operator/bufferTime.js","webpack:///./node_modules/rxjs/_esm5/operator/bufferTime.js","webpack:///./node_modules/rxjs/_esm5/add/operator/bufferToggle.js","webpack:///./node_modules/rxjs/_esm5/operator/bufferToggle.js","webpack:///./node_modules/rxjs/_esm5/add/operator/bufferWhen.js","webpack:///./node_modules/rxjs/_esm5/operator/bufferWhen.js","webpack:///./node_modules/rxjs/_esm5/add/operator/catch.js","webpack:///./node_modules/rxjs/_esm5/add/operator/combineAll.js","webpack:///./node_modules/rxjs/_esm5/operator/combineAll.js","webpack:///./node_modules/rxjs/_esm5/add/operator/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/operator/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/add/operator/concat.js","webpack:///./node_modules/rxjs/_esm5/operator/concat.js","webpack:///./node_modules/rxjs/_esm5/add/operator/concatAll.js","webpack:///./node_modules/rxjs/_esm5/operator/concatAll.js","webpack:///./node_modules/rxjs/_esm5/add/operator/concatMap.js","webpack:///./node_modules/rxjs/_esm5/operator/concatMap.js","webpack:///./node_modules/rxjs/_esm5/add/operator/concatMapTo.js","webpack:///./node_modules/rxjs/_esm5/operator/concatMapTo.js","webpack:///./node_modules/rxjs/_esm5/add/operator/count.js","webpack:///./node_modules/rxjs/_esm5/operator/count.js","webpack:///./node_modules/rxjs/_esm5/add/operator/dematerialize.js","webpack:///./node_modules/rxjs/_esm5/operator/dematerialize.js","webpack:///./node_modules/rxjs/_esm5/add/operator/debounce.js","webpack:///./node_modules/rxjs/_esm5/operator/debounce.js","webpack:///./node_modules/rxjs/_esm5/add/operator/debounceTime.js","webpack:///./node_modules/rxjs/_esm5/operator/debounceTime.js","webpack:///./node_modules/rxjs/_esm5/add/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/_esm5/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/_esm5/add/operator/delay.js","webpack:///./node_modules/rxjs/_esm5/operator/delay.js","webpack:///./node_modules/rxjs/_esm5/add/operator/delayWhen.js","webpack:///./node_modules/rxjs/_esm5/operator/delayWhen.js","webpack:///./node_modules/rxjs/_esm5/add/operator/distinct.js","webpack:///./node_modules/rxjs/_esm5/operator/distinct.js","webpack:///./node_modules/rxjs/_esm5/add/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/_esm5/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/_esm5/add/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/_esm5/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/_esm5/add/operator/do.js","webpack:///./node_modules/rxjs/_esm5/add/operator/exhaust.js","webpack:///./node_modules/rxjs/_esm5/operator/exhaust.js","webpack:///./node_modules/rxjs/_esm5/add/operator/exhaustMap.js","webpack:///./node_modules/rxjs/_esm5/operator/exhaustMap.js","webpack:///./node_modules/rxjs/_esm5/add/operator/expand.js","webpack:///./node_modules/rxjs/_esm5/operator/expand.js","webpack:///./node_modules/rxjs/_esm5/add/operator/elementAt.js","webpack:///./node_modules/rxjs/_esm5/operator/elementAt.js","webpack:///./node_modules/rxjs/_esm5/add/operator/filter.js","webpack:///./node_modules/rxjs/_esm5/operator/filter.js","webpack:///./node_modules/rxjs/_esm5/add/operator/finally.js","webpack:///./node_modules/rxjs/_esm5/add/operator/find.js","webpack:///./node_modules/rxjs/_esm5/operator/find.js","webpack:///./node_modules/rxjs/_esm5/add/operator/findIndex.js","webpack:///./node_modules/rxjs/_esm5/operator/findIndex.js","webpack:///./node_modules/rxjs/_esm5/add/operator/first.js","webpack:///./node_modules/rxjs/_esm5/operator/first.js","webpack:///./node_modules/rxjs/_esm5/add/operator/groupBy.js","webpack:///./node_modules/rxjs/_esm5/operator/groupBy.js","webpack:///./node_modules/rxjs/_esm5/add/operator/ignoreElements.js","webpack:///./node_modules/rxjs/_esm5/operator/ignoreElements.js","webpack:///./node_modules/rxjs/_esm5/add/operator/isEmpty.js","webpack:///./node_modules/rxjs/_esm5/operator/isEmpty.js","webpack:///./node_modules/rxjs/_esm5/add/operator/audit.js","webpack:///./node_modules/rxjs/_esm5/operator/audit.js","webpack:///./node_modules/rxjs/_esm5/add/operator/auditTime.js","webpack:///./node_modules/rxjs/_esm5/operator/auditTime.js","webpack:///./node_modules/rxjs/_esm5/add/operator/last.js","webpack:///./node_modules/rxjs/_esm5/operator/last.js","webpack:///./node_modules/rxjs/_esm5/add/operator/let.js","webpack:///./node_modules/rxjs/_esm5/add/operator/every.js","webpack:///./node_modules/rxjs/_esm5/operator/every.js","webpack:///./node_modules/rxjs/_esm5/add/operator/map.js","webpack:///./node_modules/rxjs/_esm5/operator/map.js","webpack:///./node_modules/rxjs/_esm5/add/operator/mapTo.js","webpack:///./node_modules/rxjs/_esm5/operator/mapTo.js","webpack:///./node_modules/rxjs/_esm5/add/operator/materialize.js","webpack:///./node_modules/rxjs/_esm5/operator/materialize.js","webpack:///./node_modules/rxjs/_esm5/add/operator/max.js","webpack:///./node_modules/rxjs/_esm5/operator/max.js","webpack:///./node_modules/rxjs/_esm5/add/operator/merge.js","webpack:///./node_modules/rxjs/_esm5/operator/merge.js","webpack:///./node_modules/rxjs/_esm5/add/operator/mergeAll.js","webpack:///./node_modules/rxjs/_esm5/operator/mergeAll.js","webpack:///./node_modules/rxjs/_esm5/add/operator/mergeMap.js","webpack:///./node_modules/rxjs/_esm5/add/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/_esm5/add/operator/mergeScan.js","webpack:///./node_modules/rxjs/_esm5/operator/mergeScan.js","webpack:///./node_modules/rxjs/_esm5/add/operator/min.js","webpack:///./node_modules/rxjs/_esm5/operator/min.js","webpack:///./node_modules/rxjs/_esm5/add/operator/multicast.js","webpack:///./node_modules/rxjs/_esm5/operator/multicast.js","webpack:///./node_modules/rxjs/_esm5/add/operator/observeOn.js","webpack:///./node_modules/rxjs/_esm5/operator/observeOn.js","webpack:///./node_modules/rxjs/_esm5/add/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/_esm5/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/_esm5/add/operator/pairwise.js","webpack:///./node_modules/rxjs/_esm5/operator/pairwise.js","webpack:///./node_modules/rxjs/_esm5/add/operator/partition.js","webpack:///./node_modules/rxjs/_esm5/operator/partition.js","webpack:///./node_modules/rxjs/_esm5/add/operator/pluck.js","webpack:///./node_modules/rxjs/_esm5/operator/pluck.js","webpack:///./node_modules/rxjs/_esm5/add/operator/publish.js","webpack:///./node_modules/rxjs/_esm5/operator/publish.js","webpack:///./node_modules/rxjs/_esm5/add/operator/publishBehavior.js","webpack:///./node_modules/rxjs/_esm5/operator/publishBehavior.js","webpack:///./node_modules/rxjs/_esm5/add/operator/publishReplay.js","webpack:///./node_modules/rxjs/_esm5/operator/publishReplay.js","webpack:///./node_modules/rxjs/_esm5/add/operator/publishLast.js","webpack:///./node_modules/rxjs/_esm5/operator/publishLast.js","webpack:///./node_modules/rxjs/_esm5/add/operator/race.js","webpack:///./node_modules/rxjs/_esm5/operator/race.js","webpack:///./node_modules/rxjs/_esm5/add/operator/reduce.js","webpack:///./node_modules/rxjs/_esm5/operator/reduce.js","webpack:///./node_modules/rxjs/_esm5/add/operator/repeat.js","webpack:///./node_modules/rxjs/_esm5/operator/repeat.js","webpack:///./node_modules/rxjs/_esm5/add/operator/repeatWhen.js","webpack:///./node_modules/rxjs/_esm5/operator/repeatWhen.js","webpack:///./node_modules/rxjs/_esm5/add/operator/retry.js","webpack:///./node_modules/rxjs/_esm5/operator/retry.js","webpack:///./node_modules/rxjs/_esm5/add/operator/retryWhen.js","webpack:///./node_modules/rxjs/_esm5/operator/retryWhen.js","webpack:///./node_modules/rxjs/_esm5/add/operator/sample.js","webpack:///./node_modules/rxjs/_esm5/operator/sample.js","webpack:///./node_modules/rxjs/_esm5/add/operator/sampleTime.js","webpack:///./node_modules/rxjs/_esm5/operator/sampleTime.js","webpack:///./node_modules/rxjs/_esm5/add/operator/scan.js","webpack:///./node_modules/rxjs/_esm5/operator/scan.js","webpack:///./node_modules/rxjs/_esm5/add/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/_esm5/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/_esm5/add/operator/share.js","webpack:///./node_modules/rxjs/_esm5/operator/share.js","webpack:///./node_modules/rxjs/_esm5/add/operator/shareReplay.js","webpack:///./node_modules/rxjs/_esm5/operator/shareReplay.js","webpack:///./node_modules/rxjs/_esm5/add/operator/single.js","webpack:///./node_modules/rxjs/_esm5/operator/single.js","webpack:///./node_modules/rxjs/_esm5/add/operator/skip.js","webpack:///./node_modules/rxjs/_esm5/operator/skip.js","webpack:///./node_modules/rxjs/_esm5/add/operator/skipLast.js","webpack:///./node_modules/rxjs/_esm5/operator/skipLast.js","webpack:///./node_modules/rxjs/_esm5/add/operator/skipUntil.js","webpack:///./node_modules/rxjs/_esm5/operator/skipUntil.js","webpack:///./node_modules/rxjs/_esm5/add/operator/skipWhile.js","webpack:///./node_modules/rxjs/_esm5/operator/skipWhile.js","webpack:///./node_modules/rxjs/_esm5/add/operator/startWith.js","webpack:///./node_modules/rxjs/_esm5/operator/startWith.js","webpack:///./node_modules/rxjs/_esm5/util/Immediate.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsapAction.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsapScheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/asap.js","webpack:///./node_modules/rxjs/_esm5/observable/SubscribeOnObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/subscribeOn.js","webpack:///./node_modules/rxjs/_esm5/operator/switch.js","webpack:///./node_modules/rxjs/_esm5/add/operator/subscribeOn.js","webpack:///./node_modules/rxjs/_esm5/operator/subscribeOn.js","webpack:///./node_modules/rxjs/_esm5/add/operator/switch.js","webpack:///./node_modules/rxjs/_esm5/add/operator/switchMap.js","webpack:///./node_modules/rxjs/_esm5/operator/switchMap.js","webpack:///./node_modules/rxjs/_esm5/add/operator/switchMapTo.js","webpack:///./node_modules/rxjs/_esm5/operator/switchMapTo.js","webpack:///./node_modules/rxjs/_esm5/add/operator/take.js","webpack:///./node_modules/rxjs/_esm5/operator/take.js","webpack:///./node_modules/rxjs/_esm5/add/operator/takeLast.js","webpack:///./node_modules/rxjs/_esm5/operator/takeLast.js","webpack:///./node_modules/rxjs/_esm5/add/operator/takeUntil.js","webpack:///./node_modules/rxjs/_esm5/operator/takeUntil.js","webpack:///./node_modules/rxjs/_esm5/add/operator/takeWhile.js","webpack:///./node_modules/rxjs/_esm5/operator/takeWhile.js","webpack:///./node_modules/rxjs/_esm5/add/operator/throttle.js","webpack:///./node_modules/rxjs/_esm5/operator/throttle.js","webpack:///./node_modules/rxjs/_esm5/add/operator/throttleTime.js","webpack:///./node_modules/rxjs/_esm5/operator/throttleTime.js","webpack:///./node_modules/rxjs/_esm5/add/operator/timeInterval.js","webpack:///./node_modules/rxjs/_esm5/operator/timeInterval.js","webpack:///./node_modules/rxjs/_esm5/add/operator/timeout.js","webpack:///./node_modules/rxjs/_esm5/operator/timeout.js","webpack:///./node_modules/rxjs/_esm5/add/operator/timeoutWith.js","webpack:///./node_modules/rxjs/_esm5/operator/timeoutWith.js","webpack:///./node_modules/rxjs/_esm5/add/operator/timestamp.js","webpack:///./node_modules/rxjs/_esm5/operator/timestamp.js","webpack:///./node_modules/rxjs/_esm5/add/operator/toArray.js","webpack:///./node_modules/rxjs/_esm5/operator/toArray.js","webpack:///./node_modules/rxjs/_esm5/add/operator/window.js","webpack:///./node_modules/rxjs/_esm5/operator/window.js","webpack:///./node_modules/rxjs/_esm5/add/operator/windowCount.js","webpack:///./node_modules/rxjs/_esm5/operator/windowCount.js","webpack:///./node_modules/rxjs/_esm5/add/operator/windowTime.js","webpack:///./node_modules/rxjs/_esm5/operator/windowTime.js","webpack:///./node_modules/rxjs/_esm5/add/operator/windowToggle.js","webpack:///./node_modules/rxjs/_esm5/operator/windowToggle.js","webpack:///./node_modules/rxjs/_esm5/add/operator/windowWhen.js","webpack:///./node_modules/rxjs/_esm5/operator/windowWhen.js","webpack:///./node_modules/rxjs/_esm5/add/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/_esm5/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/_esm5/add/operator/zip.js","webpack:///./node_modules/rxjs/_esm5/operator/zip.js","webpack:///./node_modules/rxjs/_esm5/add/operator/zipAll.js","webpack:///./node_modules/rxjs/_esm5/operator/zipAll.js","webpack:///./node_modules/rxjs/_esm5/util/AnimationFrame.js","webpack:///./node_modules/rxjs/_esm5/Rx.js","webpack:///./src/js/Helpers.js","webpack:///./src/js/components/hero.js","webpack:///./src/js/components/score.js","webpack:///./src/js/components/enemy.js","webpack:///./src/js/components/starfield.js","webpack:///./src/js/components/hero_shots.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/js/components/game.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","__webpack_exports__","_root","__window","window","__self","self","WorkerGlobalScope","canvas","ctx","document","createElement","getContext","body","appendChild","width","innerWidth","height","innerHeight","DIRECTION","ENEMY_FREQ","HERO_Y","STAR_NUMBER","SPEED","FIRE_KEY_FREQ","SHOOTING_SPEED","SPACESHIP","ENEMY","SHOT","SCORE","ENEMY_SHOOTING_FREQ","SCORE_INCREASE","_components_canvas__WEBPACK_IMPORTED_MODULE_0__","UP","DOWN","COLOR","SIZE","SHOT_COLOR","FONT_COLOR","FONT_STYLE","isFunction","x","isArray","Array","length","isObject","tryCatchTarget","errorObject","e","tryCatcher","apply","this","arguments","tryCatch","fn","__extends","b","__","constructor","UnsubscriptionError","_super","errors","err","Error","map","toString","join","stack","message","Subscription_Subscription","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","flattenUnsubscriptionErrors","sub","concat","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","empty","reduce","errs","next","error","complete","root","rxSubscriber","for","Subscriber_extends","Subscriber_Subscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Subscriber_SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","SafeSubscriber","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","getSymbolObservable","$$observable","observable","observable_observable","noop","pipe","fns","_i","pipeFromArray","input","prev","Observable_Observable","Observable","subscribe","_isScalar","_subscribe","lift","operator","source","sink","nextOrObserver","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","operations","toPromise","ObjectUnsubscribedError_extends","ObjectUnsubscribedError","SubjectSubscription_extends","SubjectSubscription","subject","observers","subscriberIndex","Subject_extends","SubjectSubscriber","Subject_Subject","Subject","hasError","thrownError","Subject_AnonymousSubject","copy","slice","asObservable","AnonymousSubject","AsyncSubject_extends","AsyncSubject_AsyncSubject","AsyncSubject","hasNext","hasCompleted","BoundCallbackObservable_extends","dispatchNext","arg","dispatchError","bindCallback","BoundCallbackObservable","callbackFunc","selector","args","scheduler","func","undefined","schedule","dispatch","handler","handlerFn","innerArgs","result_1","state","result_2","BoundNodeCallbackObservable_extends","_a","shift","BoundNodeCallbackObservable_dispatchError","BoundNodeCallbackObservable_dispatchNext","bindNodeCallback","BoundNodeCallbackObservable","isScheduler","ScalarObservable_extends","ScalarObservable","done","EmptyObservable_extends","EmptyObservable","ArrayObservable_extends","ArrayObservable_ArrayObservable","ArrayObservable","array","of","pop","count","OuterSubscriber_extends","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","isArrayLike","isPromise","then","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","iterator_iterator","InnerSubscriber_extends","InnerSubscriber","subscribeToResult","outerSubscriber","result","setTimeout","item","obs","TypeError","msg","combineLatest_extends","none","combineLatest","observables","project","CombineLatestOperator","combineLatest_CombineLatestSubscriber","CombineLatestSubscriber","active","values","toRespond","unused","oldVal","_tryProject","PromiseObservable_extends","PromiseObservable_PromiseObservable","PromiseObservable","promise","PromiseObservable_dispatchNext","PromiseObservable_dispatchError","IteratorObservable_extends","IteratorObservable","obj","IteratorObservable_StringIterator","IteratorObservable_ArrayIterator","getIterator","return","StringIterator","str","idx","charAt","ArrayIterator","arr","isNaN","isFinite","valueAsNumber","sign","Math","floor","abs","maxSafeInteger","toLength","pow","ArrayLikeObservable_extends","ArrayLikeObservable_ArrayLikeObservable","ArrayLikeObservable","arrayLike","Notification_Notification","Notification","kind","hasValue","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_extends","observeOn","delay","ObserveOnOperator","observeOn_ObserveOnSubscriber","ObserveOnSubscriber","notification","scheduleMessage","ObserveOnMessage","FromObservable_extends","FromObservable_FromObservable","FromObservable","ish","from","mergeMap_extends","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","mergeMap_MergeMapSubscriber","MergeMapSubscriber","buffer","_tryNext","_innerSub","_notifyResultSelector","identity","mergeAll","concatAll","DeferObservable_extends","DeferObservable","observableFactory","DeferObservable_DeferSubscriber","DeferSubscriber","factory","tryDefer","_callFactory","defer","empty_empty","ForkJoinObservable_extends","ForkJoinObservable_ForkJoinObservable","ForkJoinObservable","sources","ForkJoinObservable_ForkJoinSubscriber","ForkJoinSubscriber","completed","haveValues","total","innerSubscription","_hasValue","forkJoin","FromEventObservable_extends","FromEventObservable_toString","fromEvent","FromEventObservable","sourceObj","eventName","options","target","setupSubscription","isNodeList","isHTMLCollection","addEventListener","removeEventListener","isEventTarget","source_1","on","off","isJQueryStyleEventEmitter","source_2","addListener","removeListener","isNodeStyleEventEmitter","source_3","FromEventPatternObservable_extends","fromEventPattern","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","fromPromise","GenerateObservable_extends","selfSelector","generate","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","IfObservable_extends","IfObservable","thenSource","elseSource","IfObservable_IfSubscriber","IfSubscriber","tryIf","_if","isNumeric","val","parseFloat","if","Action_extends","AsyncAction_extends","AsyncAction_AsyncAction","AsyncAction","work","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action","AsyncScheduler_extends","AsyncScheduler","scheduled","action","Scheduler","SchedulerAction","now","Date","async_async","IntervalObservable_extends","interval","IntervalObservable","period","merge","mergeStatic","last","observable_merge_merge","race_extends","race","RaceOperator","race_RaceSubscriber","RaceSubscriber","hasFirst","NeverObservable_extends","never","NeverObservable","onErrorResumeNext_extends","onErrorResumeNext","nextSources","OnErrorResumeNextOperator","onErrorResumeNext_OnErrorResumeNextSubscriber","OnErrorResumeNextSubscriber","subscribeToNextSource","onErrorResumeNext_onErrorResumeNext","PairsObservable_extends","PairsObservable_dispatch","pairs","PairsObservable","RangeObservable_extends","range","RangeObservable","start","_count","UsingObservable_extends","UsingObservable","resourceFactory","resource","UsingObservable_UsingSubscriber","UsingSubscriber","tryUse","using","ErrorObservable_extends","_throw","ErrorObservable","isDate","TimerObservable_extends","timer","TimerObservable","dueTime","initialDelay","zip_extends","zip","zipStatic","ZipOperator","zip_ZipSubscriber","ZipSubscriber","iterators","zip_StaticArrayIterator","StaticIterator","zip_ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","StaticArrayIterator","ZipBufferIterator","isComplete","zip_zip","audit_extends","audit","durationSelector","AuditOperator","audit_AuditSubscriber","AuditSubscriber","throttled","duration","clearThrottle","auditTime","buffer_extends","buffer_buffer","closingNotifier","BufferOperator","buffer_BufferSubscriber","BufferSubscriber","bufferCount_extends","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferTime_extends","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferToggle_extends","bufferToggle","openings","closingSelector","BufferToggleOperator","bufferToggle_BufferToggleSubscriber","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferWhen_extends","bufferWhen","BufferWhenOperator","bufferWhen_BufferWhenSubscriber","BufferWhenSubscriber","subscribing","closingSubscription","catchError_extends","catchError","CatchOperator","caught","catchError_CatchSubscriber","CatchSubscriber","err2","combineAll","concat_concat","concatMap","concatMapTo","innerObservable","count_extends","count_count","predicate","CountOperator","CountSubscriber","_tryPredicate","debounce_extends","debounce","DebounceOperator","debounce_DebounceSubscriber","DebounceSubscriber","durationSubscription","emitValue","debounceTime_extends","debounceTime","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_dispatchNext","debouncedNext","defaultIfEmpty_extends","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","delay_extends","delay_delay","delayFor","DelayOperator","delay_DelaySubscriber","DelaySubscriber","queue","time","delay_1","max","_schedule","scheduleNotification","DelayMessage","delayWhen_extends","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","delayWhen_DelayWhenSubscriber","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","dematerialize_extends","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","minimalSetImpl","MinimalSet","_values","has","configurable","clear","distinct_extends","distinct","keySelector","flushes","DistinctOperator","distinct_DistinctSubscriber","DistinctSubscriber","_useKeySelector","_finalizeNext","distinctUntilChanged_extends","distinctUntilChanged","compare","DistinctUntilChangedOperator","distinctUntilChanged_DistinctUntilChangedSubscriber","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilKeyChanged","ArgumentOutOfRangeError_extends","ArgumentOutOfRangeError","elementAt_extends","elementAt","elementAt_ElementAtOperator","ElementAtOperator","elementAt_ElementAtSubscriber","ElementAtSubscriber","every_extends","every","thisArg","EveryOperator","EverySubscriber","everyValueMatch","exhaust_extends","exhaust","SwitchFirstOperator","exhaust_SwitchFirstSubscriber","SwitchFirstSubscriber","hasSubscription","exhaustMap_extends","exhaustMap","SwitchFirstMapOperator","exhaustMap_SwitchFirstMapSubscriber","SwitchFirstMapSubscriber","tryNext","trySelectResult","expand_extends","expand","ExpandOperator","expand_ExpandSubscriber","ExpandSubscriber","subscribeToProjection","filter_extends","filter","FilterOperator","FilterSubscriber","finalize_extends","finalize","callback","FinallyOperator","finalize_FinallySubscriber","FinallySubscriber","find_extends","find","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","EmptyError_extends","EmptyError","first_extends","first","FirstOperator","first_FirstSubscriber","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","MapPolyfill","size","_keys","set","delete","cb","FastMap","groupBy_extends","groupBy","elementSelector","subjectSelector","GroupByOperator","groupBy_GroupBySubscriber","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","groupBy_GroupedObservable","GroupDurationSubscriber","removeGroup","GroupedObservable","groupSubject","refCountSubscription","InnerRefCountSubscription","ignoreElements_extends","ignoreElements","IgnoreElementsOperator","ignoreElements_IgnoreElementsSubscriber","IgnoreElementsSubscriber","isEmpty_extends","IsEmptyOperator","IsEmptySubscriber","last_extends","last_last","LastOperator","last_LastSubscriber","LastSubscriber","map_extends","MapOperator","MapSubscriber","mapTo_extends","mapTo","MapToOperator","MapToSubscriber","materialize_extends","materialize","MaterializeOperator","materialize_MaterializeSubscriber","MaterializeSubscriber","scan_extends","scan","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","takeLast_extends","takeLast","takeLast_TakeLastOperator","TakeLastOperator","TakeLastSubscriber","ring","acc","max_max","comparer","mergeMapTo_extends","mergeMapTo","MergeMapToOperator","mergeMapTo_MergeMapToSubscriber","MergeMapToSubscriber","mergeScan_extends","mergeScan","MergeScanOperator","mergeScan_MergeScanSubscriber","MergeScanSubscriber","min_min","refCount_extends","refCount_refCount","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableObservable_extends","connectableProto","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableObservableDescriptor","writable","multicast","subjectOrSubjectFactory","MulticastOperator","pairwise_extends","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","not","pred","notPred","partition","pluck","properties","props","currentProp","plucker","publish","BehaviorSubject_extends","BehaviorSubject_BehaviorSubject","BehaviorSubject","_value","getValue","publishBehavior","publishLast","QueueAction_extends","QueueAction","QueueScheduler_extends","queue_queue","QueueScheduler","ReplaySubject_extends","ReplaySubject_ReplaySubject","ReplaySubject","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","publishReplay","selectorOrScheduler","race_race","repeat_extends","repeat","RepeatOperator","RepeatSubscriber","repeatWhen_extends","repeatWhen","notifier","RepeatWhenOperator","repeatWhen_RepeatWhenSubscriber","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","retry_extends","retry","RetryOperator","RetrySubscriber","retryWhen_extends","retryWhen","RetryWhenOperator","retryWhen_RetryWhenSubscriber","RetryWhenSubscriber","sample_extends","sample","sample_SampleOperator","SampleOperator","sampleSubscriber","SampleSubscriber","sampleTime_extends","sampleTime","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sequenceEqual_extends","sequenceEqual","compareTo","comparor","SequenceEqualOperator","sequenceEqual_SequenceEqualSubscriber","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","a","areEqual","nextB","shareSubjectFactory","share","shareReplay","shareReplayOperator","single_extends","single","SingleOperator","single_SingleSubscriber","SingleSubscriber","seenValue","applySingleValue","singleValue","skip_extends","skip","SkipOperator","SkipSubscriber","skipLast_extends","skipLast","skipLast_SkipLastOperator","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","oldValue","skipUntil_extends","skipUntil","SkipUntilOperator","skipUntil_SkipUntilSubscriber","SkipUntilSubscriber","isInnerStopped","skipWhile_extends","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","startWith","switchMap_extends","switchMap","SwitchMapOperator","switchMap_SwitchMapSubscriber","SwitchMapSubscriber","_tryNotifyNext","switchAll","switchMapTo_extends","switchMapTo","SwitchMapToOperator","switchMapTo_SwitchMapToSubscriber","SwitchMapToSubscriber","inner","tryResultSelector","take_extends","take","take_TakeOperator","TakeOperator","TakeSubscriber","takeUntil_extends","takeUntil","TakeUntilOperator","takeUntil_TakeUntilSubscriber","TakeUntilSubscriber","takeWhile_extends","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","tap_extends","tap","DoOperator","tap_DoSubscriber","DoSubscriber","safeSubscriber","throttle_extends","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","throttle_ThrottleSubscriber","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttleTime_extends","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_dispatchNext","timeInterval_extends","timeInterval","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimeoutError_extends","TimeoutError","timeout_extends","timeout","due","absoluteTimeout","waitFor","TimeoutOperator","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeoutWith_extends","timeoutWith","withObservable","TimeoutWithOperator","timeoutWith_TimeoutWithSubscriber","TimeoutWithSubscriber","timestamp","Timestamp","toArrayReducer","toArray","window_extends","window_window","windowBoundaries","window_WindowOperator","WindowOperator","windowSubscriber","window_WindowSubscriber","sourceSubscription","WindowSubscriber","openWindow","prevWindow","newWindow","windowCount_extends","windowCount","windowSize","startWindowEvery","WindowCountOperator","windowCount_WindowCountSubscriber","WindowCountSubscriber","windows","window_1","windowTime_extends","windowTime_windowTime","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","windowToggle_extends","windowToggle","WindowToggleOperator","windowToggle_WindowToggleSubscriber","WindowToggleSubscriber","openSubscription","windowWhen_extends","windowWhen","windowWhen_WindowOperator","windowWhen_WindowSubscriber","unsubscribeClosingNotification","closingNotification","withLatestFrom_extends","withLatestFrom","WithLatestFromOperator","withLatestFrom_WithLatestFromSubscriber","WithLatestFromSubscriber","found","zipAll","AjaxObservable_extends","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","ajaxDelete","ajaxPut","ajaxPatch","mapResponse","response","ajaxGetJSON","responseType","urlOrRequest","request","async","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","prop","AjaxObservable_AjaxSubscriber","post","put","patch","getJSON","AjaxSubscriber","FormData","serializeBody","send","xhr","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","JSON","stringify","setRequestHeader","progressSubscriber","xhrTimeout","AjaxTimeoutError","ontimeout","upload","xhrProgress_1","xhrError_1","onprogress","AjaxError","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","originalEvent","parseXhrResponse","parse","responseXML","ajax","assignImpl","k","getAssign","assign","assign_assign","WebSocketSubject_extends","webSocket","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","data","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","protocol","binaryType","close","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","_catch","_do","_finally","letProto","mergeMap_mergeMap","mergeMapTo_mergeMapTo","catch","finally","let","letBind","flatMap","flatMapTo","min","Immediate","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","AsapAction_extends","AsapAction_AsapAction","AsapAction","AsapScheduler_extends","asap","AsapScheduler","SubscribeOnObservable_extends","SubscribeOnObservable_SubscribeOnObservable","SubscribeOnObservable","delayTime","subscribeOn_SubscribeOnOperator","SubscribeOnOperator","_switch","subscribeOn","switch","getRandomInt","drawTriangle","isVisible","collision","_components_canvas_js__WEBPACK_IMPORTED_MODULE_0__","_Constants_js__WEBPACK_IMPORTED_MODULE_1__","color","direction","fillStyle","beginPath","moveTo","lineTo","fill","target1","target2","SpaceShip$","paintSpaceShip","rxjs__WEBPACK_IMPORTED_MODULE_0__","_canvas__WEBPACK_IMPORTED_MODULE_1__","_Helpers__WEBPACK_IMPORTED_MODULE_2__","_Constants__WEBPACK_IMPORTED_MODULE_3__","clientX","Score$","ScoreSubject$","paintScore","_Constants__WEBPACK_IMPORTED_MODULE_2__","score","font","fillText","cur","Enemies$","paintEnemies","_Helpers_js__WEBPACK_IMPORTED_MODULE_2__","enemies","enemy","isDead","shots","shot","enemyArray","parseInt","paintStars","StarStream$","stars","fillRect","star","starArray","paintHeroShots","HeroShots$","_Helpers__WEBPACK_IMPORTED_MODULE_3__","_hero__WEBPACK_IMPORTED_MODULE_4__","_score__WEBPACK_IMPORTED_MODULE_5__","playerFiring$","evt","keyCode","shotEvents","spaceShip","shot1","shot2","shotArray","heroShots","g","_starfield__WEBPACK_IMPORTED_MODULE_1__","_hero__WEBPACK_IMPORTED_MODULE_2__","_enemy__WEBPACK_IMPORTED_MODULE_3__","_hero_shots__WEBPACK_IMPORTED_MODULE_4__","_Helpers__WEBPACK_IMPORTED_MODULE_6__","_Constants__WEBPACK_IMPORTED_MODULE_7__","spaceship","actors","ship","some"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n/*@__PURE__*/ (function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\nexport { _root as root };\n//# sourceMappingURL=root.js.map \n","// Setting up the canvas element where we'll render our game\nconst canvas = document.createElement('canvas');\nconst ctx = canvas.getContext('2d');\ndocument.body.appendChild(canvas);\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nexport {canvas, ctx};","import { canvas } from \"./components/canvas\";\n\nexport const DIRECTION = {\n    UP: 'up',\n    DOWN: 'down'\n}\nexport const ENEMY_FREQ = 1500;\nexport const HERO_Y = canvas.height - 30;\nexport const STAR_NUMBER = 250;\nexport const SPEED = 40;\nexport const FIRE_KEY_FREQ = 200;\nexport const SHOOTING_SPEED = 15;\nexport const SPACESHIP = {\n    COLOR: \"#FF0000\",\n    SIZE: 20\n};\nexport const ENEMY = {\n    COLOR: \"#00ff00\",\n    SIZE: 20,\n    SHOT_COLOR: '#00ff00'\n};\nexport const SHOT = {\n    SIZE: 5,\n    COLOR: '#FF0000'\n}\n\nexport const SCORE = {\n    FONT_COLOR: '#FFF',\n    FONT_STYLE: 'bold 26px sans-serif'\n}\n\nexport const ENEMY_SHOOTING_FREQ = 750;\n\nexport const SCORE_INCREASE = 10;","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map \n","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map \n","/** PURE_IMPORTS_START ._errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n;\n//# sourceMappingURL=tryCatch.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport var UnsubscriptionError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\n//# sourceMappingURL=UnsubscriptionError.js.map \n","/** PURE_IMPORTS_START ._util_isArray,._util_isObject,._util_isFunction,._util_tryCatch,._util_errorObject,._util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport var Subscription = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map \n","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nvar Symbol = root.Symbol;\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    /*@__PURE__*/ Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map \n","/** PURE_IMPORTS_START ._util_isFunction,._Subscription,._Observer,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isFunction } from './util/isFunction';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport var Subscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map \n","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nexport function getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexport var observable = /*@__PURE__*/ getSymbolObservable(root);\n/**\n * @deprecated use observable instead\n */\nexport var $$observable = observable;\n//# sourceMappingURL=observable.js.map \n","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map \n","/** PURE_IMPORTS_START ._noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map \n","/** PURE_IMPORTS_START ._util_root,._util_toSubscriber,._symbol_observable,._util_pipe PURE_IMPORTS_END */\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport var Observable = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\n//# sourceMappingURL=Observable.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._symbol_rxSubscriber,.._Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport var ObjectUnsubscribedError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\n//# sourceMappingURL=ObjectUnsubscribedError.js.map \n","/** PURE_IMPORTS_START ._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var SubjectSubscription = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\n//# sourceMappingURL=SubjectSubscription.js.map \n","/** PURE_IMPORTS_START ._Observable,._Subscriber,._Subscription,._util_ObjectUnsubscribedError,._SubjectSubscription,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nexport var SubjectSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\n/**\n * @class Subject<T>\n */\nexport var Subject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\n/**\n * @class AnonymousSubject<T>\n */\nexport var AnonymousSubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\n//# sourceMappingURL=Subject.js.map \n","/** PURE_IMPORTS_START ._Subject,._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n/**\n * @class AsyncSubject<T>\n */\nexport var AsyncSubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject));\n//# sourceMappingURL=AsyncSubject.js.map \n","/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_errorObject,.._AsyncSubject PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var BoundCallbackObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments, it will return an Observable. If `func` function\n     * calls its callback with one argument, the Observable will emit that value.\n     * If on the other hand callback is called with multiple values, resulting\n     * Observable will emit an array with these arguments.\n     *\n     * It is very important to remember, that input function `func` is not called\n     * when output function is, but rather when Observable returned by output\n     * function is subscribed. This means if `func` makes AJAX request, that request\n     * will be made every time someone subscribes to resulting Observable, but not before.\n     *\n     * Optionally, selector function can be passed to `bindObservable`. That function\n     * takes the same arguments as callback, and returns value\n     * that will be emitted by Observable instead of callback parameters themselves.\n     * Even though by default multiple arguments passed to callback appear in the stream as array,\n     * selector function will be called with arguments directly, just as callback would.\n     * This means you can imagine default selector (when one is not provided explicitly)\n     * as function that aggregates all its arguments into array, or simply returns first argument,\n     * if there is only one.\n     *\n     * Last optional parameter - {@link Scheduler} - can be used to control when call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default subscription to Observable calls `func`\n     * synchronously, but using `Scheduler.async` as last parameter will defer call to input function,\n     * just like wrapping that call in `setTimeout` with time `0` would. So if you use async Scheduler\n     * and call `subscribe` on output Observable, all function calls that are currently executing,\n     * will end before `func` is invoked.\n     *\n     * When it comes to emitting results passed to callback, by default they are emitted\n     * immediately after `func` invokes callback. In particular, if callback is called synchronously,\n     * then subscription to resulting Observable will call `next` function synchronously as well.\n     * If you want to defer that call, using `Scheduler.async` will, again, do the job.\n     * This means that by using `Scheduler.async` you can, in a sense, ensure that `func`\n     * always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that Observable created by output function will always emit only one value\n     * and then complete right after. Even if `func` calls callback multiple times, values from\n     * second and following calls will never appear in the stream. If you need to\n     * listen for multiple calls, you probably want to use {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property), that context will be set\n     * to the same context that output function has at call time. In particular, if `func`\n     * is called as method of some object, in order to preserve proper behaviour,\n     * it is recommended to set context of output function to that object as well,\n     * provided `func` is not already bound.\n     *\n     * If input function calls its callback in \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions without any difference and error parameter\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive array of arguments passed to callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) {\n            selector = undefined;\n        }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject) {\n                            subject.error(errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject) {\n                    subject.error(errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject) {\n                subject.error(errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable));\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map \n","/** PURE_IMPORTS_START ._BoundCallbackObservable PURE_IMPORTS_END */\nimport { BoundCallbackObservable } from './BoundCallbackObservable';\nexport var bindCallback = BoundCallbackObservable.create;\n//# sourceMappingURL=bindCallback.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_bindCallback PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\nObservable.bindCallback = staticBindCallback;\n//# sourceMappingURL=bindCallback.js.map \n","/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_errorObject,.._AsyncSubject PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var BoundNodeCallbackObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) {\n            selector = undefined;\n        }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject) {\n                            subject.error(errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject) {\n                    subject.error(errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable));\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundNodeCallbackObservable.js.map \n","/** PURE_IMPORTS_START ._BoundNodeCallbackObservable PURE_IMPORTS_END */\nimport { BoundNodeCallbackObservable } from './BoundNodeCallbackObservable';\nexport var bindNodeCallback = BoundNodeCallbackObservable.create;\n//# sourceMappingURL=bindNodeCallback.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_bindNodeCallback PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\nObservable.bindNodeCallback = staticBindNodeCallback;\n//# sourceMappingURL=bindNodeCallback.js.map \n","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ScalarObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable));\n//# sourceMappingURL=ScalarObservable.js.map \n","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var EmptyObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable));\n//# sourceMappingURL=EmptyObservable.js.map \n","/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable,.._util_isScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isScheduler } from '../util/isScheduler';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable));\n//# sourceMappingURL=ArrayObservable.js.map \n","/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var OuterSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=OuterSubscriber.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map \n","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nexport function symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexport var iterator = /*@__PURE__*/ symbolIteratorPonyfill(root);\n/**\n * @deprecated use iterator instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map \n","/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var InnerSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\n//# sourceMappingURL=InnerSubscriber.js.map \n","/** PURE_IMPORTS_START ._root,._isArrayLike,._isPromise,._isObject,.._Observable,.._symbol_iterator,.._InnerSubscriber,.._symbol_observable PURE_IMPORTS_END */\nimport { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        var iterator = result[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        var obs = result[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\n//# sourceMappingURL=subscribeToResult.js.map \n","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._util_isArray,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexport var CombineLatestOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var CombineLatestSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=combineLatest.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_combineLatest PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\nObservable.combineLatest = combineLatestStatic;\n//# sourceMappingURL=combineLatest.js.map \n","/** PURE_IMPORTS_START .._util_isScheduler,.._util_isArray,._ArrayObservable,.._operators_combineLatest PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from './ArrayObservable';\nimport { CombineLatestOperator } from '../operators/combineLatest';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map \n","/** PURE_IMPORTS_START ._ArrayObservable PURE_IMPORTS_END */\nimport { ArrayObservable } from './ArrayObservable';\nexport var of = ArrayObservable.of;\n//# sourceMappingURL=of.js.map \n","/** PURE_IMPORTS_START .._util_root,.._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var PromiseObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable));\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map \n","/** PURE_IMPORTS_START .._util_root,.._Observable,.._symbol_iterator PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IteratorObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable));\nvar StringIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = str.length;\n        }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[Symbol_iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = toLength(arr);\n        }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[Symbol_iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[Symbol_iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[Symbol_iterator]();\n}\nvar maxSafeInteger = /*@__PURE__*/ Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map \n","/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayLikeObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable));\n//# sourceMappingURL=ArrayLikeObservable.js.map \n","/** PURE_IMPORTS_START ._Observable PURE_IMPORTS_END */\nimport { Observable } from './Observable';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport var Notification = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable.of(this.value);\n            case 'E':\n                return Observable.throw(this.error);\n            case 'C':\n                return Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\n//# sourceMappingURL=Notification.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._Notification PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport var ObserveOnOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var ObserveOnSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport var ObserveOnMessage = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\n//# sourceMappingURL=observeOn.js.map \n","/** PURE_IMPORTS_START .._util_isArray,.._util_isArrayLike,.._util_isPromise,._PromiseObservable,._IteratorObservable,._ArrayObservable,._ArrayLikeObservable,.._symbol_iterator,.._Observable,.._operators_observeOn,.._symbol_observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from './IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable } from '../Observable';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[Symbol_observable] === 'function') {\n                if (ish instanceof Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray(ish)) {\n                return new ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise(ish)) {\n                return new PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike(ish)) {\n                return new ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[Symbol_observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable));\n//# sourceMappingURL=FromObservable.js.map \n","/** PURE_IMPORTS_START ._FromObservable PURE_IMPORTS_END */\nimport { FromObservable } from './FromObservable';\nexport var from = FromObservable.create;\n//# sourceMappingURL=from.js.map \n","/** PURE_IMPORTS_START .._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexport var MergeMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var MergeMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=mergeMap.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map \n","/** PURE_IMPORTS_START ._mergeMap,.._util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, null, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map \n","/** PURE_IMPORTS_START ._mergeAll PURE_IMPORTS_END */\nimport { mergeAll } from './mergeAll';\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map \n","/** PURE_IMPORTS_START .._util_isScheduler,._of,._from,.._operators_concatAll PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n        return from(observables[0]);\n    }\n    return concatAll()(of.apply(void 0, observables));\n}\n//# sourceMappingURL=concat.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_concat PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\nObservable.concat = concatStatic;\n//# sourceMappingURL=concat.js.map \n","/** PURE_IMPORTS_START .._Observable,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var DeferObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable));\nvar DeferSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=DeferObservable.js.map \n","/** PURE_IMPORTS_START ._DeferObservable PURE_IMPORTS_END */\nimport { DeferObservable } from './DeferObservable';\nexport var defer = DeferObservable.create;\n//# sourceMappingURL=defer.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_defer PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\nObservable.defer = staticDefer;\n//# sourceMappingURL=defer.js.map \n","/** PURE_IMPORTS_START ._EmptyObservable PURE_IMPORTS_END */\nimport { EmptyObservable } from './EmptyObservable';\nexport var empty = EmptyObservable.create;\n//# sourceMappingURL=empty.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_empty PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\nObservable.empty = staticEmpty;\n//# sourceMappingURL=empty.js.map \n","/** PURE_IMPORTS_START .._Observable,._EmptyObservable,.._util_isArray,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ForkJoinObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map \n","/** PURE_IMPORTS_START ._ForkJoinObservable PURE_IMPORTS_END */\nimport { ForkJoinObservable } from './ForkJoinObservable';\nexport var forkJoin = ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_forkJoin PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\nObservable.forkJoin = staticForkJoin;\n//# sourceMappingURL=forkJoin.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_from PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\nObservable.from = staticFrom;\n//# sourceMappingURL=from.js.map \n","/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_isFunction,.._util_errorObject,.._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromEventObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch(selector).apply(void 0, args);\n            if (result === errorObject) {\n                subscriber.error(errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable));\n//# sourceMappingURL=FromEventObservable.js.map \n","/** PURE_IMPORTS_START ._FromEventObservable PURE_IMPORTS_END */\nimport { FromEventObservable } from './FromEventObservable';\nexport var fromEvent = FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_fromEvent PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\nObservable.fromEvent = staticFromEvent;\n//# sourceMappingURL=fromEvent.js.map \n","/** PURE_IMPORTS_START .._util_isFunction,.._Observable,.._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromEventPatternObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable));\n//# sourceMappingURL=FromEventPatternObservable.js.map \n","/** PURE_IMPORTS_START ._FromEventPatternObservable PURE_IMPORTS_END */\nimport { FromEventPatternObservable } from './FromEventPatternObservable';\nexport var fromEventPattern = FromEventPatternObservable.create;\n//# sourceMappingURL=fromEventPattern.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_fromEventPattern PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\nObservable.fromEventPattern = staticFromEventPattern;\n//# sourceMappingURL=fromEventPattern.js.map \n","/** PURE_IMPORTS_START ._PromiseObservable PURE_IMPORTS_END */\nimport { PromiseObservable } from './PromiseObservable';\nexport var fromPromise = PromiseObservable.create;\n//# sourceMappingURL=fromPromise.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_fromPromise PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\nObservable.fromPromise = staticFromPromise;\n//# sourceMappingURL=fromPromise.js.map \n","/** PURE_IMPORTS_START .._Observable,.._util_isScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var GenerateObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        _super.call(this);\n        this.initialState = initialState;\n        this.condition = condition;\n        this.iterate = iterate;\n        this.resultSelector = resultSelector;\n        this.scheduler = scheduler;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state\n            });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable));\n//# sourceMappingURL=GenerateObservable.js.map \n","/** PURE_IMPORTS_START ._GenerateObservable PURE_IMPORTS_END */\nimport { GenerateObservable } from './GenerateObservable';\nexport var generate = GenerateObservable.create;\n//# sourceMappingURL=generate.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_generate PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\nObservable.generate = staticGenerate;\n//# sourceMappingURL=generate.js.map \n","/** PURE_IMPORTS_START .._Observable,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IfObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        _super.call(this);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable));\nvar IfSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        _super.call(this, destination);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n        this.tryIf();\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=IfObservable.js.map \n","/** PURE_IMPORTS_START ._IfObservable PURE_IMPORTS_END */\nimport { IfObservable } from './IfObservable';\nexport var _if = IfObservable.create;\n//# sourceMappingURL=if.js.map \n","/** PURE_IMPORTS_START .._util_isArray PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n;\n//# sourceMappingURL=isNumeric.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_if PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\nObservable.if = _if;\n//# sourceMappingURL=if.js.map \n","/** PURE_IMPORTS_START .._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport var Action = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\n//# sourceMappingURL=Action.js.map \n","/** PURE_IMPORTS_START .._util_root,._Action PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var AsyncAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\n//# sourceMappingURL=AsyncAction.js.map \n","/** PURE_IMPORTS_START .._Scheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Scheduler } from '../Scheduler';\nexport var AsyncScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\n//# sourceMappingURL=AsyncScheduler.js.map \n","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport var Scheduler = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\n//# sourceMappingURL=Scheduler.js.map \n","/** PURE_IMPORTS_START ._AsyncAction,._AsyncScheduler PURE_IMPORTS_END */\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map \n","/** PURE_IMPORTS_START .._util_isNumeric,.._Observable,.._scheduler_async PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isNumeric } from '../util/isNumeric';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IntervalObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) {\n            period = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = async;\n        }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) {\n            period = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = async;\n        }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable));\n//# sourceMappingURL=IntervalObservable.js.map \n","/** PURE_IMPORTS_START ._IntervalObservable PURE_IMPORTS_END */\nimport { IntervalObservable } from './IntervalObservable';\nexport var interval = IntervalObservable.create;\n//# sourceMappingURL=interval.js.map \n","/** PURE_IMPORTS_START .._Observable,.._observable_ArrayObservable,._mergeAll,.._util_isScheduler PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { mergeAll } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(mergeStatic.apply(void 0, [source].concat(observables))); };\n}\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(new ArrayObservable(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_interval PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\nObservable.interval = staticInterval;\n//# sourceMappingURL=interval.js.map \n","/** PURE_IMPORTS_START .._operator_merge PURE_IMPORTS_END */\nimport { mergeStatic } from '../operator/merge';\nexport var merge = mergeStatic;\n//# sourceMappingURL=merge.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_merge PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\nObservable.merge = mergeStatic;\n//# sourceMappingURL=merge.js.map \n","/** PURE_IMPORTS_START .._util_isArray,.._observable_ArrayObservable,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable(observables).lift(new RaceOperator());\n}\nexport var RaceOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var RaceSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=race.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_race PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\nObservable.race = staticRace;\n//# sourceMappingURL=race.js.map \n","/** PURE_IMPORTS_START .._Observable,.._util_noop PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var NeverObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop();\n    };\n    return NeverObservable;\n}(Observable));\n//# sourceMappingURL=NeverObservable.js.map \n","/** PURE_IMPORTS_START ._NeverObservable PURE_IMPORTS_END */\nimport { NeverObservable } from './NeverObservable';\nexport var never = NeverObservable.create;\n//# sourceMappingURL=never.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_never PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\nObservable.never = staticNever;\n//# sourceMappingURL=never.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_of PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\nObservable.of = staticOf;\n//# sourceMappingURL=of.js.map \n","/** PURE_IMPORTS_START .._observable_FromObservable,.._util_isArray,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { FromObservable } from '../observable/FromObservable';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nvar OnErrorResumeNextOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map \n","/** PURE_IMPORTS_START .._operators_onErrorResumeNext PURE_IMPORTS_END */\nimport { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\nexport var onErrorResumeNext = onErrorResumeNextStatic;\n//# sourceMappingURL=onErrorResumeNext.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_onErrorResumeNext PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map \n","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var PairsObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        _super.call(this);\n        this.obj = obj;\n        this.scheduler = scheduler;\n        this.keys = Object.keys(obj);\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional IScheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional IScheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable));\n//# sourceMappingURL=PairsObservable.js.map \n","/** PURE_IMPORTS_START ._PairsObservable PURE_IMPORTS_END */\nimport { PairsObservable } from './PairsObservable';\nexport var pairs = PairsObservable.create;\n//# sourceMappingURL=pairs.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_pairs PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { pairs as staticPairs } from '../../observable/pairs';\nObservable.pairs = staticPairs;\n//# sourceMappingURL=pairs.js.map \n","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var RangeObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) {\n            start = 0;\n        }\n        if (count === void 0) {\n            count = 0;\n        }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable));\n//# sourceMappingURL=RangeObservable.js.map \n","/** PURE_IMPORTS_START ._RangeObservable PURE_IMPORTS_END */\nimport { RangeObservable } from './RangeObservable';\nexport var range = RangeObservable.create;\n//# sourceMappingURL=range.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_range PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\nObservable.range = staticRange;\n//# sourceMappingURL=range.js.map \n","/** PURE_IMPORTS_START .._Observable,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var UsingObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        _super.call(this);\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable));\nvar UsingSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        _super.call(this, destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=UsingObservable.js.map \n","/** PURE_IMPORTS_START ._UsingObservable PURE_IMPORTS_END */\nimport { UsingObservable } from './UsingObservable';\nexport var using = UsingObservable.create;\n//# sourceMappingURL=using.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_using PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\nObservable.using = staticUsing;\n//# sourceMappingURL=using.js.map \n","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ErrorObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        subscriber.syncErrorThrowable = true;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable));\n//# sourceMappingURL=ErrorObservable.js.map \n","/** PURE_IMPORTS_START ._ErrorObservable PURE_IMPORTS_END */\nimport { ErrorObservable } from './ErrorObservable';\nexport var _throw = ErrorObservable.create;\n//# sourceMappingURL=throw.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\n//# sourceMappingURL=isDate.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_throw PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\nObservable.throw = _throw;\n//# sourceMappingURL=throw.js.map \n","/** PURE_IMPORTS_START .._util_isNumeric,.._Observable,.._scheduler_async,.._util_isScheduler,.._util_isDate PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isNumeric } from '../util/isNumeric';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var TimerObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) {\n            dueTime = 0;\n        }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler(scheduler)) {\n            scheduler = async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) {\n            initialDelay = 0;\n        }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable));\n//# sourceMappingURL=TimerObservable.js.map \n","/** PURE_IMPORTS_START ._TimerObservable PURE_IMPORTS_END */\nimport { TimerObservable } from './TimerObservable';\nexport var timer = TimerObservable.create;\n//# sourceMappingURL=timer.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_timer PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\nObservable.timer = staticTimer;\n//# sourceMappingURL=timer.js.map \n","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._util_isArray,.._Subscriber,.._OuterSubscriber,.._util_subscribeToResult,.._symbol_iterator PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));\n    };\n}\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexport var ZipOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var ZipSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) {\n            values = Object.create(null);\n        }\n        _super.call(this, destination);\n        this.iterators = [];\n        this.active = 0;\n        this.project = (typeof project === 'function') ? project : null;\n        this.values = values;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber));\nvar StaticIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        _super.call(this, destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    ZipBufferIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber));\n//# sourceMappingURL=zip.js.map \n","/** PURE_IMPORTS_START .._operators_zip PURE_IMPORTS_END */\nimport { zipStatic } from '../operators/zip';\nexport var zip = zipStatic;\n//# sourceMappingURL=zip.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_zip PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\nObservable.zip = zipStatic;\n//# sourceMappingURL=zip.js.map \n","/** PURE_IMPORTS_START .._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nvar AuditOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch(this.durationSelector)(value);\n            if (duration === errorObject) {\n                this.destination.error(errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=audit.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,._audit,.._observable_timer PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime(duration, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return audit(function () { return timer(duration, scheduler); });\n}\n//# sourceMappingURL=auditTime.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nvar BufferOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        _super.call(this, destination);\n        this.buffer = [];\n        this.add(subscribeToResult(this, closingNotifier));\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=buffer.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) {\n        startBufferEvery = null;\n    }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nvar BufferCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=bufferCount.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._Subscriber,.._util_isScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nvar BufferTimeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        _super.call(this, destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        var context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map \n","/** PURE_IMPORTS_START .._Subscription,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map \n","/** PURE_IMPORTS_START .._Subscription,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nvar BufferWhenOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nvar CatchOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=catchError.js.map \n","/** PURE_IMPORTS_START .._operators_combineLatest PURE_IMPORTS_END */\nimport { CombineLatestOperator } from '../operators/combineLatest';\nexport function combineAll(project) {\n    return function (source) { return source.lift(new CombineLatestOperator(project)); };\n}\n//# sourceMappingURL=combineAll.js.map \n","/** PURE_IMPORTS_START .._observable_concat PURE_IMPORTS_END */\nimport { concat as concatStatic } from '../observable/concat';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concatStatic.apply(void 0, [source].concat(observables))); };\n}\n//# sourceMappingURL=concat.js.map \n","/** PURE_IMPORTS_START ._mergeMap PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap(project, resultSelector) {\n    return mergeMap(project, resultSelector, 1);\n}\n//# sourceMappingURL=concatMap.js.map \n","/** PURE_IMPORTS_START ._concatMap PURE_IMPORTS_END */\nimport { concatMap } from './concatMap';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo(innerObservable, resultSelector) {\n    return concatMap(function () { return innerObservable; }, resultSelector);\n}\n//# sourceMappingURL=concatMapTo.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nvar DebounceOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=debounce.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._scheduler_async PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nvar DebounceTimeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) {\n        defaultValue = null;\n    }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nvar DefaultIfEmptyOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        _super.call(this, destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._util_isDate,.._Subscriber,.._Notification PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay(delay, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    var absoluteDelay = isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nvar DelayOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        _super.call(this, destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber));\nvar DelayMessage = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._Observable,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nvar DelayWhenOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber));\n//# sourceMappingURL=delayWhen.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nvar DeMaterializeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=dematerialize.js.map \n","/** PURE_IMPORTS_START ._root PURE_IMPORTS_END */\nimport { root } from './root';\nexport function minimalSetImpl() {\n    // THIS IS NOT a full impl of Set, this is just the minimum\n    // bits of functionality we need for this library.\n    return (function () {\n        function MinimalSet() {\n            this._values = [];\n        }\n        MinimalSet.prototype.add = function (value) {\n            if (!this.has(value)) {\n                this._values.push(value);\n            }\n        };\n        MinimalSet.prototype.has = function (value) {\n            return this._values.indexOf(value) !== -1;\n        };\n        Object.defineProperty(MinimalSet.prototype, \"size\", {\n            get: function () {\n                return this._values.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MinimalSet.prototype.clear = function () {\n            this._values.length = 0;\n        };\n        return MinimalSet;\n    }());\n}\nexport var Set = root.Set || /*@__PURE__*/ minimalSetImpl();\n//# sourceMappingURL=Set.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult,.._util_Set PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Set } from '../util/Set';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nvar DistinctOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var DistinctSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set();\n        if (flushes) {\n            this.add(subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=distinct.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_tryCatch,.._util_errorObject PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map \n","/** PURE_IMPORTS_START ._distinctUntilChanged PURE_IMPORTS_END */\nimport { distinctUntilChanged } from './distinctUntilChanged';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\n//# sourceMappingURL=distinctUntilKeyChanged.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport var ArgumentOutOfRangeError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nvar ElementAtOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber));\n//# sourceMappingURL=elementAt.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nvar EveryOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber));\n//# sourceMappingURL=every.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nvar SwitchFirstOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap(project, resultSelector) {\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\n}\nvar SwitchFirstMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map \n","/** PURE_IMPORTS_START .._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (scheduler === void 0) {\n        scheduler = undefined;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nexport var ExpandOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var ExpandSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        _super.call(this, destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch(this.project)(value, index);\n            if (result === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=expand.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nvar FinallyOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        _super.call(this, destination);\n        this.add(new Subscription(callback));\n    }\n    return FinallySubscriber;\n}(Subscriber));\n//# sourceMappingURL=finalize.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nexport var FindValueOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var FindValueSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber));\n//# sourceMappingURL=find.js.map \n","/** PURE_IMPORTS_START .._operators_find PURE_IMPORTS_END */\nimport { FindValueOperator } from '../operators/find';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex(predicate, thisArg) {\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, true, thisArg)); };\n}\n//# sourceMappingURL=findIndex.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport var EmptyError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\n//# sourceMappingURL=EmptyError.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_EmptyError PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nvar FirstOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber));\n//# sourceMappingURL=first.js.map \n","export var MapPolyfill = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\n//# sourceMappingURL=MapPolyfill.js.map \n","/** PURE_IMPORTS_START ._root,._MapPolyfill PURE_IMPORTS_END */\nimport { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\nexport var Map = root.Map || /*@__PURE__*/ (function () { return MapPolyfill; })();\n//# sourceMappingURL=Map.js.map \n","export var FastMap = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\n//# sourceMappingURL=FastMap.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._Subscription,.._Observable,.._Subject,.._util_Map,.._util_FastMap PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = this.subjectSelector ? this.subjectSelector() : new Subject();\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        _super.call(this, group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport var GroupedObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        _super.call(this);\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        _super.call(this);\n        this.parent = parent;\n        parent.count++;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_noop PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nvar IgnoreElementsOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        _super.apply(this, arguments);\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ignoreElements.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nvar IsEmptyOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        _super.call(this, destination);\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=isEmpty.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_EmptyError PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };\n}\nvar LastOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.hasValue = false;\n        this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            this.lastValue = defaultValue;\n            this.hasValue = true;\n        }\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=last.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport var MapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._Notification PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nvar MaterializeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=materialize.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) {\n            hasSeed = false;\n        }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError,.._observable_EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map \n","/** PURE_IMPORTS_START ._scan,._takeLast,._defaultIfEmpty,.._util_pipe PURE_IMPORTS_END */\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { pipe } from '../util/pipe';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe(scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast(1))(source);\n    };\n}\n//# sourceMappingURL=reduce.js.map \n","/** PURE_IMPORTS_START ._reduce PURE_IMPORTS_END */\nimport { reduce } from './reduce';\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return reduce(max);\n}\n//# sourceMappingURL=max.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport var MergeMapToOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var MergeMapToSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=mergeMapTo.js.map \n","/** PURE_IMPORTS_START .._util_tryCatch,.._util_errorObject,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexport var MergeScanOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var MergeScanSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=mergeScan.js.map \n","/** PURE_IMPORTS_START ._reduce PURE_IMPORTS_END */\nimport { reduce } from './reduce';\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return reduce(min);\n}\n//# sourceMappingURL=min.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map \n","/** PURE_IMPORTS_START .._Subject,.._Observable,.._Subscriber,.._Subscription,.._operators_refCount PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nexport var ConnectableObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map \n","/** PURE_IMPORTS_START .._observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport var MulticastOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\n//# sourceMappingURL=multicast.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\n//# sourceMappingURL=not.js.map \n","/** PURE_IMPORTS_START .._util_not,._filter PURE_IMPORTS_END */\nimport { not } from '../util/not';\nimport { filter } from './filter';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition(predicate, thisArg) {\n    return function (source) {\n        return [\n            filter(predicate, thisArg)(source),\n            filter(not(predicate, thisArg))(source)\n        ];\n    };\n}\n//# sourceMappingURL=partition.js.map \n","/** PURE_IMPORTS_START ._map PURE_IMPORTS_END */\nimport { map } from './map';\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map(plucker(properties, length))(source); };\n}\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map \n","/** PURE_IMPORTS_START .._Subject,._multicast PURE_IMPORTS_END */\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish(selector) {\n    return selector ?\n        multicast(function () { return new Subject(); }, selector) :\n        multicast(new Subject());\n}\n//# sourceMappingURL=publish.js.map \n","/** PURE_IMPORTS_START ._Subject,._util_ObjectUnsubscribedError PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n/**\n * @class BehaviorSubject<T>\n */\nexport var BehaviorSubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject));\n//# sourceMappingURL=BehaviorSubject.js.map \n","/** PURE_IMPORTS_START .._BehaviorSubject,._multicast PURE_IMPORTS_END */\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior(value) {\n    return function (source) { return multicast(new BehaviorSubject(value))(source); };\n}\n//# sourceMappingURL=publishBehavior.js.map \n","/** PURE_IMPORTS_START .._AsyncSubject,._multicast PURE_IMPORTS_END */\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\n//TODO(benlesh): specify that the second type is actually a ConnectableObservable\nexport function publishLast() {\n    return function (source) { return multicast(new AsyncSubject())(source); };\n}\n//# sourceMappingURL=publishLast.js.map \n","/** PURE_IMPORTS_START ._AsyncAction PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var QueueAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\n//# sourceMappingURL=QueueAction.js.map \n","/** PURE_IMPORTS_START ._AsyncScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AsyncScheduler } from './AsyncScheduler';\nexport var QueueScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\n//# sourceMappingURL=QueueScheduler.js.map \n","/** PURE_IMPORTS_START ._QueueAction,._QueueScheduler PURE_IMPORTS_END */\nimport { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map \n","/** PURE_IMPORTS_START ._Subject,._scheduler_queue,._Subscription,._operators_observeOn,._util_ObjectUnsubscribedError,._SubjectSubscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport var ReplaySubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nvar ReplayEvent = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map \n","/** PURE_IMPORTS_START .._ReplaySubject,._multicast PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nimport { multicast } from './multicast';\n/* tslint:enable:max-line-length */\nexport function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast(function () { return subject; }, selector)(source); };\n}\n//# sourceMappingURL=publishReplay.js.map \n","/** PURE_IMPORTS_START .._util_isArray,.._observable_race PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nimport { race as raceStatic } from '../observable/race';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(raceStatic.apply(void 0, [source].concat(observables)));\n    };\n}\n//# sourceMappingURL=race.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._observable_EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { EmptyObservable } from '../observable/EmptyObservable';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nvar RepeatOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber));\n//# sourceMappingURL=repeat.js.map \n","/** PURE_IMPORTS_START .._Subject,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            else if (this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map \n","/** PURE_IMPORTS_START .._Subject,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                retries = tryCatch(this.notifier)(errors);\n                if (retries === errorObject) {\n                    return _super.prototype.error.call(this, errorObject.e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._scheduler_async PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nvar SampleTimeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        _super.call(this, destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_tryCatch,.._util_errorObject PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexport var SequenceEqualOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var SequenceEqualSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch(comparor)(a, b);\n                if (areEqual === errorObject) {\n                    this.destination.error(errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber));\nvar SequenceEqualCompareToSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map \n","/** PURE_IMPORTS_START ._multicast,._refCount,.._Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n;\n//# sourceMappingURL=share.js.map \n","/** PURE_IMPORTS_START .._ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n//# sourceMappingURL=shareReplay.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_EmptyError PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nvar SingleOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber));\n//# sourceMappingURL=single.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nvar SkipLastOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        _super.call(this, destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipLast.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nvar SkipUntilOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.isInnerStopped = false;\n        this.add(subscribeToResult(this, notifier));\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map \n","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._observable_ScalarObservable,.._observable_EmptyObservable,.._observable_concat,.._util_isScheduler PURE_IMPORTS_END */\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concatStatic(new ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concatStatic(new ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concatStatic(new EmptyObservable(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map \n","/** PURE_IMPORTS_START ._switchMap,.._util_identity PURE_IMPORTS_END */\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\nexport function switchAll() {\n    return switchMap(identity);\n}\n//# sourceMappingURL=switchAll.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nvar SwitchMapToOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMapTo.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError,.._observable_EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nvar TakeWhileOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map \n","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport var defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle(durationSelector, config) {\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nvar ThrottleOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasTrailingValue = false;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=throttle.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._scheduler_async,._throttle PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nvar ThrottleTimeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._scheduler_async PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function timeInterval(scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nexport var TimeInterval = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\n;\nvar TimeIntervalOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.lastTime = 0;\n        this.lastTime = scheduler.now();\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber));\n//# sourceMappingURL=timeInterval.js.map \n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport var TimeoutError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError() {\n        var err = _super.call(this, 'Timeout has occurred');\n        this.name = err.name = 'TimeoutError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return TimeoutError;\n}(Error));\n//# sourceMappingURL=TimeoutError.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._util_isDate,.._Subscriber,.._util_TimeoutError PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { TimeoutError } from '../util/TimeoutError';\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout(due, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    var absoluteTimeout = isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError())); };\n}\nvar TimeoutOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber));\n//# sourceMappingURL=timeout.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._util_isDate,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) {\n        var absoluteTimeout = isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nvar TimeoutWithOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,._map PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { map } from './map';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp(scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexport var Timestamp = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\n;\n//# sourceMappingURL=timestamp.js.map \n","/** PURE_IMPORTS_START ._reduce PURE_IMPORTS_END */\nimport { reduce } from './reduce';\nfunction toArrayReducer(arr, item, index) {\n    arr.push(item);\n    return arr;\n}\nexport function toArray() {\n    return reduce(toArrayReducer, []);\n}\n//# sourceMappingURL=toArray.js.map \n","/** PURE_IMPORTS_START .._Subject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=window.js.map \n","/** PURE_IMPORTS_START .._Subscriber,.._Subject PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) {\n        startWindowEvery = 0;\n    }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nvar WindowCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=windowCount.js.map \n","/** PURE_IMPORTS_START .._Subject,.._scheduler_async,.._Subscriber,.._util_isNumeric,.._util_isScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nvar WindowTimeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(CountedSubject, _super);\n    function CountedSubject() {\n        _super.apply(this, arguments);\n        this._numberOfNextedValues = 0;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        var window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map \n","/** PURE_IMPORTS_START .._Subject,.._Subscription,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nvar WindowToggleOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject) {\n                return this.error(errorObject.e);\n            }\n            else {\n                var window_1 = new Subject();\n                var subscription = new Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map \n","/** PURE_IMPORTS_START .._Subject,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) {\n            innerSub = null;\n        }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            var err = errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map \n","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map \n","/** PURE_IMPORTS_START ._zip PURE_IMPORTS_END */\nimport { ZipOperator } from './zip';\nexport function zipAll(project) {\n    return function (source) { return source.lift(new ZipOperator(project)); };\n}\n//# sourceMappingURL=zipAll.js.map \n","/** PURE_IMPORTS_START .._.._util_root,.._.._util_tryCatch,.._.._util_errorObject,.._.._Observable,.._.._Subscriber,.._.._operators PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { map } from '../../operators';\nfunction getCORSRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else if (!!root.XDomainRequest) {\n        return new root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nexport function ajaxGet(url, headers) {\n    if (headers === void 0) {\n        headers = null;\n    }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\n;\nexport function ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\n;\nexport function ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\n;\nexport function ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\n;\nexport function ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\n;\nvar mapResponse = /*@__PURE__*/ map(function (x, index) { return x.response; });\nexport function ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var AjaxObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var AjaxSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch(createXHR).call(request);\n        if (xhr === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject) {\n                this.error(errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n            if (result === errorObject) {\n                this.error(errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root.FormData && body instanceof root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber));\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport var AjaxResponse = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport var AjaxError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error));\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport var AjaxTimeoutError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\n//# sourceMappingURL=AjaxObservable.js.map \n","/** PURE_IMPORTS_START ._AjaxObservable PURE_IMPORTS_END */\nimport { AjaxObservable } from './AjaxObservable';\nexport var ajax = AjaxObservable.create;\n//# sourceMappingURL=ajax.js.map \n","/** PURE_IMPORTS_START ._root PURE_IMPORTS_END */\nimport { root } from './root';\nexport function assignImpl(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    var len = sources.length;\n    for (var i = 0; i < len; i++) {\n        var source = sources[i];\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                target[k] = source[k];\n            }\n        }\n    }\n    return target;\n}\n;\nexport function getAssign(root) {\n    return root.Object.assign || assignImpl;\n}\nexport var assign = /*@__PURE__*/ getAssign(root);\n//# sourceMappingURL=assign.js.map \n","/** PURE_IMPORTS_START .._.._.._Observable,.._.._.._observable_dom_ajax PURE_IMPORTS_END */\nimport { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nObservable.ajax = staticAjax;\n//# sourceMappingURL=ajax.js.map \n","/** PURE_IMPORTS_START .._.._Subject,.._.._Subscriber,.._.._Observable,.._.._Subscription,.._.._util_root,.._.._ReplaySubject,.._.._util_tryCatch,.._.._util_errorObject,.._.._util_assign PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var WebSocketSubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        if (urlConfigOrSource instanceof Observable) {\n            _super.call(this, destination, urlConfigOrSource);\n        }\n        else {\n            _super.call(this);\n            this.WebSocketCtor = root.WebSocket;\n            this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign(this, urlConfigOrSource);\n            }\n            if (!this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject();\n        }\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n     *\n     * @example <caption>Wraps browser WebSocket</caption>\n     *\n     * let socket$ = Observable.webSocket('ws://localhost:8081');\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n     *\n     * import { w3cwebsocket } from 'websocket';\n     *\n     * let socket$ = Observable.webSocket({\n     *   url: 'ws://localhost:8081',\n     *   WebSocketCtor: w3cwebsocket\n     * });\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this.socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable(function (observer) {\n            var result = tryCatch(subMsg)();\n            if (result === errorObject) {\n                observer.error(errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch(messageFilter)(x);\n                if (result === errorObject) {\n                    observer.error(errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch(unsubMsg)();\n                if (result === errorObject) {\n                    observer.error(errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n            if (this.binaryType) {\n                this.socket.binaryType = this.binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch(_this.resultSelector)(e);\n            if (result === errorObject) {\n                observer.error(errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0) {\n                if (socket && socket.readyState === 1) {\n                    socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this._resetState();\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(AnonymousSubject));\n//# sourceMappingURL=WebSocketSubject.js.map \n","/** PURE_IMPORTS_START ._WebSocketSubject PURE_IMPORTS_END */\nimport { WebSocketSubject } from './WebSocketSubject';\nexport var webSocket = WebSocketSubject.create;\n//# sourceMappingURL=webSocket.js.map \n","/** PURE_IMPORTS_START .._operators_catchError PURE_IMPORTS_END */\nimport { catchError as higherOrder } from '../operators/catchError';\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch(selector) {\n    return higherOrder(selector)(this);\n}\n//# sourceMappingURL=catch.js.map \n","/** PURE_IMPORTS_START .._operators_tap PURE_IMPORTS_END */\nimport { tap as higherOrder } from '../operators/tap';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do(nextOrObserver, error, complete) {\n    return higherOrder(nextOrObserver, error, complete)(this);\n}\n//# sourceMappingURL=do.js.map \n","/** PURE_IMPORTS_START .._operators_finalize PURE_IMPORTS_END */\nimport { finalize } from '../operators/finalize';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally(callback) {\n    return finalize(callback)(this);\n}\n//# sourceMappingURL=finally.js.map \n","/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function letProto(func) {\n    return func(this);\n}\n//# sourceMappingURL=let.js.map \n","/** PURE_IMPORTS_START .._operators_mergeMap PURE_IMPORTS_END */\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return higherOrderMergeMap(project, resultSelector, concurrent)(this);\n}\n//# sourceMappingURL=mergeMap.js.map \n","/** PURE_IMPORTS_START .._operators_mergeMapTo PURE_IMPORTS_END */\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return higherOrder(innerObservable, resultSelector, concurrent)(this);\n}\n//# sourceMappingURL=mergeMapTo.js.map \n","/** PURE_IMPORTS_START .._.._.._Observable,.._.._.._observable_dom_webSocket PURE_IMPORTS_END */\nimport { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\nObservable.webSocket = staticWebSocket;\n//# sourceMappingURL=webSocket.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_buffer PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\nObservable.prototype.buffer = buffer;\n//# sourceMappingURL=buffer.js.map \n","/** PURE_IMPORTS_START .._operators_buffer PURE_IMPORTS_END */\nimport { buffer as higherOrder } from '../operators/buffer';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer(closingNotifier) {\n    return higherOrder(closingNotifier)(this);\n}\n//# sourceMappingURL=buffer.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_bufferCount PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\nObservable.prototype.bufferCount = bufferCount;\n//# sourceMappingURL=bufferCount.js.map \n","/** PURE_IMPORTS_START .._operators_bufferCount PURE_IMPORTS_END */\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) {\n        startBufferEvery = null;\n    }\n    return higherOrder(bufferSize, startBufferEvery)(this);\n}\n//# sourceMappingURL=bufferCount.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_bufferTime PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\nObservable.prototype.bufferTime = bufferTime;\n//# sourceMappingURL=bufferTime.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._util_isScheduler,.._operators_bufferTime PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\n//# sourceMappingURL=bufferTime.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_bufferToggle PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\nObservable.prototype.bufferToggle = bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map \n","/** PURE_IMPORTS_START .._operators_bufferToggle PURE_IMPORTS_END */\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle(openings, closingSelector) {\n    return higherOrder(openings, closingSelector)(this);\n}\n//# sourceMappingURL=bufferToggle.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_bufferWhen PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\nObservable.prototype.bufferWhen = bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map \n","/** PURE_IMPORTS_START .._operators_bufferWhen PURE_IMPORTS_END */\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen(closingSelector) {\n    return higherOrder(closingSelector)(this);\n}\n//# sourceMappingURL=bufferWhen.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_catch PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n//# sourceMappingURL=catch.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_combineAll PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\nObservable.prototype.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map \n","/** PURE_IMPORTS_START .._operators_combineAll PURE_IMPORTS_END */\nimport { combineAll as higherOrder } from '../operators/combineAll';\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll(project) {\n    return higherOrder(project)(this);\n}\n//# sourceMappingURL=combineAll.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_combineLatest PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\nObservable.prototype.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map \n","/** PURE_IMPORTS_START .._operators_combineLatest PURE_IMPORTS_END */\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, observables)(this);\n}\n//# sourceMappingURL=combineLatest.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_concat PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\nObservable.prototype.concat = concat;\n//# sourceMappingURL=concat.js.map \n","/** PURE_IMPORTS_START .._operators_concat PURE_IMPORTS_END */\nimport { concat as higherOrder } from '../operators/concat';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, observables)(this);\n}\n//# sourceMappingURL=concat.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_concatAll PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\nObservable.prototype.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map \n","/** PURE_IMPORTS_START .._operators_concatAll PURE_IMPORTS_END */\nimport { concatAll as higherOrder } from '../operators/concatAll';\n/* tslint:enable:max-line-length */\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=concatAll.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_concatMap PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\nObservable.prototype.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map \n","/** PURE_IMPORTS_START .._operators_concatMap PURE_IMPORTS_END */\nimport { concatMap as higherOrderConcatMap } from '../operators/concatMap';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap(project, resultSelector) {\n    return higherOrderConcatMap(project, resultSelector)(this);\n}\n//# sourceMappingURL=concatMap.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_concatMapTo PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\nObservable.prototype.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map \n","/** PURE_IMPORTS_START .._operators_concatMapTo PURE_IMPORTS_END */\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo(innerObservable, resultSelector) {\n    return higherOrder(innerObservable, resultSelector)(this);\n}\n//# sourceMappingURL=concatMapTo.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_count PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\nObservable.prototype.count = count;\n//# sourceMappingURL=count.js.map \n","/** PURE_IMPORTS_START .._operators_count PURE_IMPORTS_END */\nimport { count as higherOrder } from '../operators/count';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count(predicate) {\n    return higherOrder(predicate)(this);\n}\n//# sourceMappingURL=count.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_dematerialize PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\nObservable.prototype.dematerialize = dematerialize;\n//# sourceMappingURL=dematerialize.js.map \n","/** PURE_IMPORTS_START .._operators_dematerialize PURE_IMPORTS_END */\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=dematerialize.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_debounce PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\nObservable.prototype.debounce = debounce;\n//# sourceMappingURL=debounce.js.map \n","/** PURE_IMPORTS_START .._operators_debounce PURE_IMPORTS_END */\nimport { debounce as higherOrder } from '../operators/debounce';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce(durationSelector) {\n    return higherOrder(durationSelector)(this);\n}\n//# sourceMappingURL=debounce.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_debounceTime PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\nObservable.prototype.debounceTime = debounceTime;\n//# sourceMappingURL=debounceTime.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_debounceTime PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return higherOrder(dueTime, scheduler)(this);\n}\n//# sourceMappingURL=debounceTime.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_defaultIfEmpty PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map \n","/** PURE_IMPORTS_START .._operators_defaultIfEmpty PURE_IMPORTS_END */\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) {\n        defaultValue = null;\n    }\n    return higherOrder(defaultValue)(this);\n}\n//# sourceMappingURL=defaultIfEmpty.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_delay PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\nObservable.prototype.delay = delay;\n//# sourceMappingURL=delay.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_delay PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { delay as higherOrder } from '../operators/delay';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay(delay, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return higherOrder(delay, scheduler)(this);\n}\n//# sourceMappingURL=delay.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_delayWhen PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\nObservable.prototype.delayWhen = delayWhen;\n//# sourceMappingURL=delayWhen.js.map \n","/** PURE_IMPORTS_START .._operators_delayWhen PURE_IMPORTS_END */\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n//# sourceMappingURL=delayWhen.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_distinct PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\nObservable.prototype.distinct = distinct;\n//# sourceMappingURL=distinct.js.map \n","/** PURE_IMPORTS_START .._operators_distinct PURE_IMPORTS_END */\nimport { distinct as higherOrder } from '../operators/distinct';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct(keySelector, flushes) {\n    return higherOrder(keySelector, flushes)(this);\n}\n//# sourceMappingURL=distinct.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_distinctUntilChanged PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map \n","/** PURE_IMPORTS_START .._operators_distinctUntilChanged PURE_IMPORTS_END */\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return higherOrder(compare, keySelector)(this);\n}\n//# sourceMappingURL=distinctUntilChanged.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_distinctUntilKeyChanged PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map \n","/** PURE_IMPORTS_START .._operators_distinctUntilKeyChanged PURE_IMPORTS_END */\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged(key, compare) {\n    return higherOrder(key, compare)(this);\n}\n//# sourceMappingURL=distinctUntilKeyChanged.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_do PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n//# sourceMappingURL=do.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_exhaust PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\nObservable.prototype.exhaust = exhaust;\n//# sourceMappingURL=exhaust.js.map \n","/** PURE_IMPORTS_START .._operators_exhaust PURE_IMPORTS_END */\nimport { exhaust as higherOrder } from '../operators/exhaust';\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=exhaust.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_exhaustMap PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\nObservable.prototype.exhaustMap = exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map \n","/** PURE_IMPORTS_START .._operators_exhaustMap PURE_IMPORTS_END */\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap(project, resultSelector) {\n    return higherOrder(project, resultSelector)(this);\n}\n//# sourceMappingURL=exhaustMap.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_expand PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\nObservable.prototype.expand = expand;\n//# sourceMappingURL=expand.js.map \n","/** PURE_IMPORTS_START .._operators_expand PURE_IMPORTS_END */\nimport { expand as higherOrder } from '../operators/expand';\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (scheduler === void 0) {\n        scheduler = undefined;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return higherOrder(project, concurrent, scheduler)(this);\n}\n//# sourceMappingURL=expand.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_elementAt PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\nObservable.prototype.elementAt = elementAt;\n//# sourceMappingURL=elementAt.js.map \n","/** PURE_IMPORTS_START .._operators_elementAt PURE_IMPORTS_END */\nimport { elementAt as higherOrder } from '../operators/elementAt';\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt(index, defaultValue) {\n    return higherOrder(index, defaultValue)(this);\n}\n//# sourceMappingURL=elementAt.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_filter PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\nObservable.prototype.filter = filter;\n//# sourceMappingURL=filter.js.map \n","/** PURE_IMPORTS_START .._operators_filter PURE_IMPORTS_END */\nimport { filter as higherOrderFilter } from '../operators/filter';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return higherOrderFilter(predicate, thisArg)(this);\n}\n//# sourceMappingURL=filter.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_finally PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n//# sourceMappingURL=finally.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_find PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\nObservable.prototype.find = find;\n//# sourceMappingURL=find.js.map \n","/** PURE_IMPORTS_START .._operators_find PURE_IMPORTS_END */\nimport { find as higherOrder } from '../operators/find';\n/* tslint:enable:max-line-length */\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find(predicate, thisArg) {\n    return higherOrder(predicate, thisArg)(this);\n}\n//# sourceMappingURL=find.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_findIndex PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\nObservable.prototype.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map \n","/** PURE_IMPORTS_START .._operators_findIndex PURE_IMPORTS_END */\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex(predicate, thisArg) {\n    return higherOrder(predicate, thisArg)(this);\n}\n//# sourceMappingURL=findIndex.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_first PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\nObservable.prototype.first = first;\n//# sourceMappingURL=first.js.map \n","/** PURE_IMPORTS_START .._operators_first PURE_IMPORTS_END */\nimport { first as higherOrder } from '../operators/first';\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first(predicate, resultSelector, defaultValue) {\n    return higherOrder(predicate, resultSelector, defaultValue)(this);\n}\n//# sourceMappingURL=first.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_groupBy PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\nObservable.prototype.groupBy = groupBy;\n//# sourceMappingURL=groupBy.js.map \n","/** PURE_IMPORTS_START .._operators_groupBy PURE_IMPORTS_END */\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return higherOrder(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\n//# sourceMappingURL=groupBy.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_ignoreElements PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\nObservable.prototype.ignoreElements = ignoreElements;\n//# sourceMappingURL=ignoreElements.js.map \n","/** PURE_IMPORTS_START .._operators_ignoreElements PURE_IMPORTS_END */\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements() {\n    return higherOrder()(this);\n}\n;\n//# sourceMappingURL=ignoreElements.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_isEmpty PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\nObservable.prototype.isEmpty = isEmpty;\n//# sourceMappingURL=isEmpty.js.map \n","/** PURE_IMPORTS_START .._operators_isEmpty PURE_IMPORTS_END */\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=isEmpty.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_audit PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\nObservable.prototype.audit = audit;\n//# sourceMappingURL=audit.js.map \n","/** PURE_IMPORTS_START .._operators_audit PURE_IMPORTS_END */\nimport { audit as higherOrder } from '../operators/audit';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return higherOrder(durationSelector)(this);\n}\n//# sourceMappingURL=audit.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_auditTime PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\nObservable.prototype.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_auditTime PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime(duration, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return higherOrder(duration, scheduler)(this);\n}\n//# sourceMappingURL=auditTime.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_last PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\nObservable.prototype.last = last;\n//# sourceMappingURL=last.js.map \n","/** PURE_IMPORTS_START .._operators_last PURE_IMPORTS_END */\nimport { last as higherOrder } from '../operators/last';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last(predicate, resultSelector, defaultValue) {\n    return higherOrder(predicate, resultSelector, defaultValue)(this);\n}\n//# sourceMappingURL=last.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_let PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n//# sourceMappingURL=let.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_every PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\nObservable.prototype.every = every;\n//# sourceMappingURL=every.js.map \n","/** PURE_IMPORTS_START .._operators_every PURE_IMPORTS_END */\nimport { every as higherOrder } from '../operators/every';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every(predicate, thisArg) {\n    return higherOrder(predicate, thisArg)(this);\n}\n//# sourceMappingURL=every.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_map PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\nObservable.prototype.map = map;\n//# sourceMappingURL=map.js.map \n","/** PURE_IMPORTS_START .._operators_map PURE_IMPORTS_END */\nimport { map as higherOrderMap } from '../operators/map';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return higherOrderMap(project, thisArg)(this);\n}\n//# sourceMappingURL=map.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_mapTo PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\nObservable.prototype.mapTo = mapTo;\n//# sourceMappingURL=mapTo.js.map \n","/** PURE_IMPORTS_START .._operators_mapTo PURE_IMPORTS_END */\nimport { mapTo as higherOrder } from '../operators/mapTo';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return higherOrder(value)(this);\n}\n//# sourceMappingURL=mapTo.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_materialize PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\nObservable.prototype.materialize = materialize;\n//# sourceMappingURL=materialize.js.map \n","/** PURE_IMPORTS_START .._operators_materialize PURE_IMPORTS_END */\nimport { materialize as higherOrder } from '../operators/materialize';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=materialize.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_max PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\nObservable.prototype.max = max;\n//# sourceMappingURL=max.js.map \n","/** PURE_IMPORTS_START .._operators_max PURE_IMPORTS_END */\nimport { max as higherOrderMax } from '../operators/max';\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max(comparer) {\n    return higherOrderMax(comparer)(this);\n}\n//# sourceMappingURL=max.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_merge PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\nObservable.prototype.merge = merge;\n//# sourceMappingURL=merge.js.map \n","/** PURE_IMPORTS_START .._operators_merge PURE_IMPORTS_END */\nimport { merge as higherOrder } from '../operators/merge';\nexport { mergeStatic } from '../operators/merge';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, observables)(this);\n}\n//# sourceMappingURL=merge.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_mergeAll PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\nObservable.prototype.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map \n","/** PURE_IMPORTS_START .._operators_mergeAll PURE_IMPORTS_END */\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return higherOrder(concurrent)(this);\n}\n//# sourceMappingURL=mergeAll.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_mergeMap PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\nObservable.prototype.mergeMap = mergeMap;\nObservable.prototype.flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_mergeMapTo PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\nObservable.prototype.flatMapTo = mergeMapTo;\nObservable.prototype.mergeMapTo = mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_mergeScan PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\nObservable.prototype.mergeScan = mergeScan;\n//# sourceMappingURL=mergeScan.js.map \n","/** PURE_IMPORTS_START .._operators_mergeScan PURE_IMPORTS_END */\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return higherOrder(accumulator, seed, concurrent)(this);\n}\n//# sourceMappingURL=mergeScan.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_min PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\nObservable.prototype.min = min;\n//# sourceMappingURL=min.js.map \n","/** PURE_IMPORTS_START .._operators_min PURE_IMPORTS_END */\nimport { min as higherOrderMin } from '../operators/min';\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min(comparer) {\n    return higherOrderMin(comparer)(this);\n}\n//# sourceMappingURL=min.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_multicast PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\nObservable.prototype.multicast = multicast;\n//# sourceMappingURL=multicast.js.map \n","/** PURE_IMPORTS_START .._operators_multicast PURE_IMPORTS_END */\nimport { multicast as higherOrder } from '../operators/multicast';\n/* tslint:enable:max-line-length */\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return higherOrder(subjectOrSubjectFactory, selector)(this);\n}\n//# sourceMappingURL=multicast.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_observeOn PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\nObservable.prototype.observeOn = observeOn;\n//# sourceMappingURL=observeOn.js.map \n","/** PURE_IMPORTS_START .._operators_observeOn PURE_IMPORTS_END */\nimport { observeOn as higherOrder } from '../operators/observeOn';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return higherOrder(scheduler, delay)(this);\n}\n//# sourceMappingURL=observeOn.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_onErrorResumeNext PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map \n","/** PURE_IMPORTS_START .._operators_onErrorResumeNext PURE_IMPORTS_END */\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, nextSources)(this);\n}\n//# sourceMappingURL=onErrorResumeNext.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_pairwise PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\nObservable.prototype.pairwise = pairwise;\n//# sourceMappingURL=pairwise.js.map \n","/** PURE_IMPORTS_START .._operators_pairwise PURE_IMPORTS_END */\nimport { pairwise as higherOrder } from '../operators/pairwise';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=pairwise.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_partition PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\nObservable.prototype.partition = partition;\n//# sourceMappingURL=partition.js.map \n","/** PURE_IMPORTS_START .._operators_partition PURE_IMPORTS_END */\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition(predicate, thisArg) {\n    return higherOrder(predicate, thisArg)(this);\n}\n//# sourceMappingURL=partition.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_pluck PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\nObservable.prototype.pluck = pluck;\n//# sourceMappingURL=pluck.js.map \n","/** PURE_IMPORTS_START .._operators_pluck PURE_IMPORTS_END */\nimport { pluck as higherOrder } from '../operators/pluck';\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, properties)(this);\n}\n//# sourceMappingURL=pluck.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_publish PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\nObservable.prototype.publish = publish;\n//# sourceMappingURL=publish.js.map \n","/** PURE_IMPORTS_START .._operators_publish PURE_IMPORTS_END */\nimport { publish as higherOrder } from '../operators/publish';\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish(selector) {\n    return higherOrder(selector)(this);\n}\n//# sourceMappingURL=publish.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_publishBehavior PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\nObservable.prototype.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map \n","/** PURE_IMPORTS_START .._operators_publishBehavior PURE_IMPORTS_END */\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior(value) {\n    return higherOrder(value)(this);\n}\n//# sourceMappingURL=publishBehavior.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_publishReplay PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\nObservable.prototype.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map \n","/** PURE_IMPORTS_START .._operators_publishReplay PURE_IMPORTS_END */\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return higherOrder(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\n//# sourceMappingURL=publishReplay.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_publishLast PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\nObservable.prototype.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map \n","/** PURE_IMPORTS_START .._operators_publishLast PURE_IMPORTS_END */\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast() {\n    //TODO(benlesh): correct type-flow through here.\n    return higherOrder()(this);\n}\n//# sourceMappingURL=publishLast.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_race PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\nObservable.prototype.race = race;\n//# sourceMappingURL=race.js.map \n","/** PURE_IMPORTS_START .._operators_race PURE_IMPORTS_END */\nimport { race as higherOrder } from '../operators/race';\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, observables)(this);\n}\n//# sourceMappingURL=race.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_reduce PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\nObservable.prototype.reduce = reduce;\n//# sourceMappingURL=reduce.js.map \n","/** PURE_IMPORTS_START .._operators_reduce PURE_IMPORTS_END */\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return higherOrderReduce(accumulator, seed)(this);\n    }\n    return higherOrderReduce(accumulator)(this);\n}\n//# sourceMappingURL=reduce.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_repeat PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\nObservable.prototype.repeat = repeat;\n//# sourceMappingURL=repeat.js.map \n","/** PURE_IMPORTS_START .._operators_repeat PURE_IMPORTS_END */\nimport { repeat as higherOrder } from '../operators/repeat';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return higherOrder(count)(this);\n}\n//# sourceMappingURL=repeat.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_repeatWhen PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\nObservable.prototype.repeatWhen = repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map \n","/** PURE_IMPORTS_START .._operators_repeatWhen PURE_IMPORTS_END */\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return higherOrder(notifier)(this);\n}\n//# sourceMappingURL=repeatWhen.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_retry PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\nObservable.prototype.retry = retry;\n//# sourceMappingURL=retry.js.map \n","/** PURE_IMPORTS_START .._operators_retry PURE_IMPORTS_END */\nimport { retry as higherOrder } from '../operators/retry';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return higherOrder(count)(this);\n}\n//# sourceMappingURL=retry.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_retryWhen PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\nObservable.prototype.retryWhen = retryWhen;\n//# sourceMappingURL=retryWhen.js.map \n","/** PURE_IMPORTS_START .._operators_retryWhen PURE_IMPORTS_END */\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return higherOrder(notifier)(this);\n}\n//# sourceMappingURL=retryWhen.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_sample PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\nObservable.prototype.sample = sample;\n//# sourceMappingURL=sample.js.map \n","/** PURE_IMPORTS_START .._operators_sample PURE_IMPORTS_END */\nimport { sample as higherOrder } from '../operators/sample';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return higherOrder(notifier)(this);\n}\n//# sourceMappingURL=sample.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_sampleTime PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\nObservable.prototype.sampleTime = sampleTime;\n//# sourceMappingURL=sampleTime.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_sampleTime PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return higherOrder(period, scheduler)(this);\n}\n//# sourceMappingURL=sampleTime.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_scan PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { scan } from '../../operator/scan';\nObservable.prototype.scan = scan;\n//# sourceMappingURL=scan.js.map \n","/** PURE_IMPORTS_START .._operators_scan PURE_IMPORTS_END */\nimport { scan as higherOrderScan } from '../operators/scan';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return higherOrderScan(accumulator, seed)(this);\n    }\n    return higherOrderScan(accumulator)(this);\n}\n//# sourceMappingURL=scan.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_sequenceEqual PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\nObservable.prototype.sequenceEqual = sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map \n","/** PURE_IMPORTS_START .._operators_sequenceEqual PURE_IMPORTS_END */\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual(compareTo, comparor) {\n    return higherOrder(compareTo, comparor)(this);\n}\n//# sourceMappingURL=sequenceEqual.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_share PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\nObservable.prototype.share = share;\n//# sourceMappingURL=share.js.map \n","/** PURE_IMPORTS_START .._operators_share PURE_IMPORTS_END */\nimport { share as higherOrder } from '../operators/share';\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share() {\n    return higherOrder()(this);\n}\n;\n//# sourceMappingURL=share.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_shareReplay PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\nObservable.prototype.shareReplay = shareReplay;\n//# sourceMappingURL=shareReplay.js.map \n","/** PURE_IMPORTS_START .._operators_shareReplay PURE_IMPORTS_END */\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay(bufferSize, windowTime, scheduler) {\n    return higherOrder(bufferSize, windowTime, scheduler)(this);\n}\n;\n//# sourceMappingURL=shareReplay.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_single PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\nObservable.prototype.single = single;\n//# sourceMappingURL=single.js.map \n","/** PURE_IMPORTS_START .._operators_single PURE_IMPORTS_END */\nimport { single as higherOrder } from '../operators/single';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single(predicate) {\n    return higherOrder(predicate)(this);\n}\n//# sourceMappingURL=single.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_skip PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\nObservable.prototype.skip = skip;\n//# sourceMappingURL=skip.js.map \n","/** PURE_IMPORTS_START .._operators_skip PURE_IMPORTS_END */\nimport { skip as higherOrder } from '../operators/skip';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return higherOrder(count)(this);\n}\n//# sourceMappingURL=skip.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_skipLast PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\nObservable.prototype.skipLast = skipLast;\n//# sourceMappingURL=skipLast.js.map \n","/** PURE_IMPORTS_START .._operators_skipLast PURE_IMPORTS_END */\nimport { skipLast as higherOrder } from '../operators/skipLast';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast(count) {\n    return higherOrder(count)(this);\n}\n//# sourceMappingURL=skipLast.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_skipUntil PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\nObservable.prototype.skipUntil = skipUntil;\n//# sourceMappingURL=skipUntil.js.map \n","/** PURE_IMPORTS_START .._operators_skipUntil PURE_IMPORTS_END */\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return higherOrder(notifier)(this);\n}\n//# sourceMappingURL=skipUntil.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_skipWhile PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\nObservable.prototype.skipWhile = skipWhile;\n//# sourceMappingURL=skipWhile.js.map \n","/** PURE_IMPORTS_START .._operators_skipWhile PURE_IMPORTS_END */\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return higherOrder(predicate)(this);\n}\n//# sourceMappingURL=skipWhile.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_startWith PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\nObservable.prototype.startWith = startWith;\n//# sourceMappingURL=startWith.js.map \n","/** PURE_IMPORTS_START .._operators_startWith PURE_IMPORTS_END */\nimport { startWith as higherOrder } from '../operators/startWith';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, array)(this);\n}\n//# sourceMappingURL=startWith.js.map \n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n/** PURE_IMPORTS_START ._root PURE_IMPORTS_END */\nimport { root } from './root';\nexport var ImmediateDefinition = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexport var Immediate = /*@__PURE__*/ new ImmediateDefinition(root);\n//# sourceMappingURL=Immediate.js.map \n","/** PURE_IMPORTS_START .._util_Immediate,._AsyncAction PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var AsapAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction));\n//# sourceMappingURL=AsapAction.js.map \n","/** PURE_IMPORTS_START ._AsyncScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AsyncScheduler } from './AsyncScheduler';\nexport var AsapScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        _super.apply(this, arguments);\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler));\n//# sourceMappingURL=AsapScheduler.js.map \n","/** PURE_IMPORTS_START ._AsapAction,._AsapScheduler PURE_IMPORTS_END */\nimport { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexport var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map \n","/** PURE_IMPORTS_START .._Observable,.._scheduler_asap,.._util_isNumeric PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var SubscribeOnObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) {\n            delayTime = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        _super.call(this);\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap;\n        }\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable));\n//# sourceMappingURL=SubscribeOnObservable.js.map \n","/** PURE_IMPORTS_START .._observable_SubscribeOnObservable PURE_IMPORTS_END */\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nvar SubscribeOnOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n//# sourceMappingURL=subscribeOn.js.map \n","/** PURE_IMPORTS_START .._operators_switchAll PURE_IMPORTS_END */\nimport { switchAll as higherOrder } from '../operators/switchAll';\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=switch.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_subscribeOn PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\nObservable.prototype.subscribeOn = subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map \n","/** PURE_IMPORTS_START .._operators_subscribeOn PURE_IMPORTS_END */\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return higherOrder(scheduler, delay)(this);\n}\n//# sourceMappingURL=subscribeOn.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_switch PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n//# sourceMappingURL=switch.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_switchMap PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\nObservable.prototype.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map \n","/** PURE_IMPORTS_START .._operators_switchMap PURE_IMPORTS_END */\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    return higherOrderSwitchMap(project, resultSelector)(this);\n}\n//# sourceMappingURL=switchMap.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_switchMapTo PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\nObservable.prototype.switchMapTo = switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map \n","/** PURE_IMPORTS_START .._operators_switchMapTo PURE_IMPORTS_END */\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo(innerObservable, resultSelector) {\n    return higherOrder(innerObservable, resultSelector)(this);\n}\n//# sourceMappingURL=switchMapTo.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_take PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\nObservable.prototype.take = take;\n//# sourceMappingURL=take.js.map \n","/** PURE_IMPORTS_START .._operators_take PURE_IMPORTS_END */\nimport { take as higherOrder } from '../operators/take';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return higherOrder(count)(this);\n}\n//# sourceMappingURL=take.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_takeLast PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\nObservable.prototype.takeLast = takeLast;\n//# sourceMappingURL=takeLast.js.map \n","/** PURE_IMPORTS_START .._operators_takeLast PURE_IMPORTS_END */\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast(count) {\n    return higherOrderTakeLast(count)(this);\n}\n//# sourceMappingURL=takeLast.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_takeUntil PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\nObservable.prototype.takeUntil = takeUntil;\n//# sourceMappingURL=takeUntil.js.map \n","/** PURE_IMPORTS_START .._operators_takeUntil PURE_IMPORTS_END */\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return higherOrder(notifier)(this);\n}\n//# sourceMappingURL=takeUntil.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_takeWhile PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\nObservable.prototype.takeWhile = takeWhile;\n//# sourceMappingURL=takeWhile.js.map \n","/** PURE_IMPORTS_START .._operators_takeWhile PURE_IMPORTS_END */\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile(predicate) {\n    return higherOrder(predicate)(this);\n}\n//# sourceMappingURL=takeWhile.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_throttle PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\nObservable.prototype.throttle = throttle;\n//# sourceMappingURL=throttle.js.map \n","/** PURE_IMPORTS_START .._operators_throttle PURE_IMPORTS_END */\nimport { throttle as higherOrder, defaultThrottleConfig } from '../operators/throttle';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle(durationSelector, config) {\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return higherOrder(durationSelector, config)(this);\n}\n//# sourceMappingURL=throttle.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_throttleTime PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\nObservable.prototype.throttleTime = throttleTime;\n//# sourceMappingURL=throttleTime.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_throttle,.._operators_throttleTime PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return higherOrder(duration, scheduler, config)(this);\n}\n//# sourceMappingURL=throttleTime.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_timeInterval PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\nObservable.prototype.timeInterval = timeInterval;\n//# sourceMappingURL=timeInterval.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_timeInterval PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport { TimeInterval };\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval(scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return higherOrder(scheduler)(this);\n}\n//# sourceMappingURL=timeInterval.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_timeout PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\nObservable.prototype.timeout = timeout;\n//# sourceMappingURL=timeout.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_timeout PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { timeout as higherOrder } from '../operators/timeout';\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout(due, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return higherOrder(due, scheduler)(this);\n}\n//# sourceMappingURL=timeout.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_timeoutWith PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\nObservable.prototype.timeoutWith = timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_timeoutWith PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return higherOrder(due, withObservable, scheduler)(this);\n}\n//# sourceMappingURL=timeoutWith.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_timestamp PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { timestamp } from '../../operator/timestamp';\nObservable.prototype.timestamp = timestamp;\n//# sourceMappingURL=timestamp.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._operators_timestamp PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp(scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return higherOrder(scheduler)(this);\n}\n//# sourceMappingURL=timestamp.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_toArray PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\nObservable.prototype.toArray = toArray;\n//# sourceMappingURL=toArray.js.map \n","/** PURE_IMPORTS_START .._operators_toArray PURE_IMPORTS_END */\nimport { toArray as higherOrder } from '../operators/toArray';\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray() {\n    return higherOrder()(this);\n}\n//# sourceMappingURL=toArray.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_window PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\nObservable.prototype.window = window;\n//# sourceMappingURL=window.js.map \n","/** PURE_IMPORTS_START .._operators_window PURE_IMPORTS_END */\nimport { window as higherOrder } from '../operators/window';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window(windowBoundaries) {\n    return higherOrder(windowBoundaries)(this);\n}\n//# sourceMappingURL=window.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_windowCount PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\nObservable.prototype.windowCount = windowCount;\n//# sourceMappingURL=windowCount.js.map \n","/** PURE_IMPORTS_START .._operators_windowCount PURE_IMPORTS_END */\nimport { windowCount as higherOrder } from '../operators/windowCount';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) {\n        startWindowEvery = 0;\n    }\n    return higherOrder(windowSize, startWindowEvery)(this);\n}\n//# sourceMappingURL=windowCount.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_windowTime PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\nObservable.prototype.windowTime = windowTime;\n//# sourceMappingURL=windowTime.js.map \n","/** PURE_IMPORTS_START .._scheduler_async,.._util_isNumeric,.._util_isScheduler,.._operators_windowTime PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\n}\n//# sourceMappingURL=windowTime.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_windowToggle PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\nObservable.prototype.windowToggle = windowToggle;\n//# sourceMappingURL=windowToggle.js.map \n","/** PURE_IMPORTS_START .._operators_windowToggle PURE_IMPORTS_END */\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle(openings, closingSelector) {\n    return higherOrder(openings, closingSelector)(this);\n}\n//# sourceMappingURL=windowToggle.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_windowWhen PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\nObservable.prototype.windowWhen = windowWhen;\n//# sourceMappingURL=windowWhen.js.map \n","/** PURE_IMPORTS_START .._operators_windowWhen PURE_IMPORTS_END */\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen(closingSelector) {\n    return higherOrder(closingSelector)(this);\n}\n//# sourceMappingURL=windowWhen.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_withLatestFrom PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\nObservable.prototype.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map \n","/** PURE_IMPORTS_START .._operators_withLatestFrom PURE_IMPORTS_END */\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, args)(this);\n}\n//# sourceMappingURL=withLatestFrom.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_zip PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\nObservable.prototype.zip = zipProto;\n//# sourceMappingURL=zip.js.map \n","/** PURE_IMPORTS_START .._operators_zip PURE_IMPORTS_END */\nimport { zip as higherOrder } from '../operators/zip';\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, observables)(this);\n}\n//# sourceMappingURL=zip.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_zipAll PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\nObservable.prototype.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map \n","/** PURE_IMPORTS_START .._operators_zipAll PURE_IMPORTS_END */\nimport { zipAll as higherOrder } from '../operators/zipAll';\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll(project) {\n    return higherOrder(project)(this);\n}\n//# sourceMappingURL=zipAll.js.map \n","/** PURE_IMPORTS_START ._root PURE_IMPORTS_END */\nimport { root } from './root';\nexport var RequestAnimationFrameDefinition = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexport var AnimationFrame = /*@__PURE__*/ new RequestAnimationFrameDefinition(root);\n//# sourceMappingURL=AnimationFrame.js.map \n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\n/** PURE_IMPORTS_START ._scheduler_asap,._scheduler_async,._scheduler_queue,._scheduler_animationFrame,._symbol_rxSubscriber,._symbol_iterator,._symbol_observable,._operators PURE_IMPORTS_END */\nexport { Subject, AnonymousSubject } from './Subject';\n/* tslint:enable:no-unused-variable */\nexport { Observable } from './Observable';\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n/* tslint:disable:no-unused-variable */\nexport { Subscription } from './Subscription';\nexport { Subscriber } from './Subscriber';\nexport { AsyncSubject } from './AsyncSubject';\nexport { ReplaySubject } from './ReplaySubject';\nexport { BehaviorSubject } from './BehaviorSubject';\nexport { ConnectableObservable } from './observable/ConnectableObservable';\nexport { Notification } from './Notification';\nexport { EmptyError } from './util/EmptyError';\nexport { ArgumentOutOfRangeError } from './util/ArgumentOutOfRangeError';\nexport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nexport { TimeoutError } from './util/TimeoutError';\nexport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport { TimeInterval } from './operator/timeInterval';\nexport { Timestamp } from './operators/timestamp';\nexport { TestScheduler } from './testing/TestScheduler';\nexport { VirtualTimeScheduler } from './scheduler/VirtualTimeScheduler';\nexport { AjaxResponse, AjaxError, AjaxTimeoutError } from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\nimport * as _operators from './operators';\nexport var operators = _operators;\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap,\n    queue: queue,\n    animationFrame: animationFrame,\n    async: async\n};\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber,\n    observable: observable,\n    iterator: iterator\n};\nexport { Scheduler, Symbol };\n//# sourceMappingURL=Rx.js.map \n","import { ctx, canvas } from \"./components/canvas.js\";\nimport { DIRECTION } from \"./Constants.js\";\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction drawTriangle(x, y, width, color, direction) {\n  ctx.fillStyle = color;\n  ctx.beginPath();\n  ctx.moveTo(x - width, y);\n  ctx.lineTo(x, direction === DIRECTION.UP ? y - width : y + width);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x - width, y);\n  ctx.fill();\n}\n\nfunction isVisible(obj) {\n  return (\n    obj.x > -40 &&\n    obj.x < canvas.width + 40 &&\n    obj.y > -40 &&\n    obj.y < canvas.height + 40\n  );\n}\n\nfunction collision(target1, target2) {\n  return (\n    Math.abs(target1.x - target2.x) < 20 && Math.abs(target1.y - target2.y) < 20\n  );\n}\n\nexport { getRandomInt, drawTriangle, isVisible, collision };\n","import { Observable } from \"rxjs\";\n\nimport { canvas } from \"./canvas\";\nimport { drawTriangle } from \"../Helpers\";\nimport { HERO_Y, SPACESHIP, DIRECTION } from \"../Constants\";\n\nconst mouseMove = Observable.fromEvent(canvas, \"mousemove\");\nconst SpaceShip$ = mouseMove\n  .map(event => ({\n    x: event.clientX,\n    y: HERO_Y\n  }))\n  .startWith({\n    x: canvas.width / 2,\n    y: HERO_Y\n  });\n\nfunction paintSpaceShip(x, y) {\n  drawTriangle(x, y, SPACESHIP.SIZE, SPACESHIP.COLOR, DIRECTION.UP);\n}\n\nexport { SpaceShip$, paintSpaceShip };\n","import { BehaviorSubject } from \"rxjs\";\nimport { ctx } from \"./canvas\";\nimport { SCORE } from \"../Constants\";\n\nfunction paintScore(score) {\n  ctx.fillStyle = SCORE.FONT_COLOR;\n  ctx.font = SCORE.FONT_STYLE;\n  ctx.fillText(`Score: ${score}`, 40, 43);\n}\n\nconst ScoreSubject$ = new BehaviorSubject(0);\nconst Score$ = ScoreSubject$.scan((prev, cur) => prev + cur, 0);\n\nexport { Score$, ScoreSubject$, paintScore };\n","import { Observable } from \"rxjs\";\n\nimport { canvas } from \"./canvas\";\nimport { drawTriangle, getRandomInt, isVisible } from \"../Helpers.js\";\nimport {\n  ENEMY,\n  DIRECTION,\n  ENEMY_FREQ,\n  SHOOTING_SPEED,\n  ENEMY_SHOOTING_FREQ\n} from \"../Constants\";\n\nfunction paintEnemies(enemies) {\n  enemies.forEach(enemy => {\n    enemy.y += 5;\n    enemy.x += getRandomInt(-15, 15);\n\n    if (!enemy.isDead) {\n      drawTriangle(enemy.x, enemy.y, ENEMY.SIZE, ENEMY.COLOR, DIRECTION.DOWN);\n    }\n\n    enemy.shots.forEach(shot => {\n      shot.y += SHOOTING_SPEED;\n      drawTriangle(shot.x, shot.y, 5, ENEMY.SHOT_COLOR, DIRECTION.DOWN);\n    });\n  });\n}\n\nconst Enemies$ = Observable.interval(ENEMY_FREQ).scan(enemyArray => {\n  const enemy = {\n    x: parseInt(Math.random() * canvas.width, 10),\n    y: -30,\n    shots: []\n  };\n\n  Observable.interval(ENEMY_SHOOTING_FREQ).subscribe(() => {\n    if (!enemy.isDead) {\n      enemy.shots.push({ x: enemy.x, y: enemy.y });\n    }\n    enemy.shots = enemy.shots.filter(isVisible);\n  });\n\n  enemyArray.push(enemy);\n  return enemyArray\n    .filter(isVisible)\n    .filter(enemy => !(enemy.isDead && enemy.shots.length === 0));\n}, []);\n\nexport { Enemies$, paintEnemies };\n","import { Observable } from \"rxjs\";\n\nimport { canvas, ctx } from \"./canvas\";\nimport { STAR_NUMBER, SPEED } from \"../Constants\";\n\nfunction paintStars(stars) {\n  ctx.fillStyle = \"#000\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = \"#fff\";\n  stars.forEach(star => {\n    ctx.fillRect(star.x, star.y, star.size, star.size);\n  });\n}\n\nconst StarStream$ = Observable.range(1, STAR_NUMBER)\n  .map(() => ({\n    x: parseInt(Math.random() * canvas.width, 10),\n    y: parseInt(Math.random() * canvas.height, 10),\n    size: Math.random() * 3 + 1\n  }))\n  .toArray()\n  .flatMap(starArray =>\n    Observable.interval(SPEED).map(() => {\n      starArray.map(star => {\n        if (star.y >= canvas.height) {\n          star.y = 0; // Reset star to top of the screen\n        }\n        star.y += star.size; // Move star\n      });\n      return starArray;\n    })\n  );\n\nexport { paintStars, StarStream$ };\n","import { Observable } from \"rxjs\";\n\nimport { canvas } from \"./canvas\";\nimport {\n  FIRE_KEY_FREQ,\n  SHOOTING_SPEED,\n  SHOT,\n  DIRECTION,\n  HERO_Y,\n  SCORE_INCREASE\n} from \"../Constants\";\nimport { drawTriangle, collision } from \"../Helpers\";\nimport { SpaceShip$ } from \"./hero\";\nimport { ScoreSubject$ } from \"./score\";\n\nconst playerFiring$ = Observable.merge(\n  Observable.fromEvent(canvas, \"click\"),\n  Observable.fromEvent(document, \"keydown\").filter(evt => evt.keyCode == 32)\n)\n  .startWith({})\n  .sampleTime(FIRE_KEY_FREQ)\n  .timestamp();\n\nconst HeroShots$ = Observable.combineLatest(\n  playerFiring$,\n  SpaceShip$,\n  (shotEvents, spaceShip) => ({\n    timestamp: shotEvents.timestamp,\n    x: spaceShip.x\n  })\n)\n  .distinctUntilChanged((shot1, shot2) => shot1.timestamp === shot2.timestamp)\n  .scan((shotArray, shot) => {\n    shotArray.push({\n      x: shot.x,\n      y: HERO_Y\n    });\n    return shotArray;\n  }, []);\n\nfunction paintHeroShots(heroShots, enemies) {\n  heroShots.forEach((shot, i) => {\n    for (let l = 0; l < enemies.length; l++) {\n      const enemy = enemies[l];\n      if (!enemy.isDead && collision(shot, enemy)) {\n        ScoreSubject$.next(SCORE_INCREASE);\n        enemy.isDead = true;\n        shot.x = shot.y = -100;\n        break;\n      }\n    }\n    shot.y -= SHOOTING_SPEED;\n    drawTriangle(shot.x, shot.y, SHOT.SIZE, SHOT.COLOR, DIRECTION.UP);\n  });\n}\n\nexport { paintHeroShots, HeroShots$ };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Observable } from \"rxjs\";\n\nimport { paintStars, StarStream$ } from \"./starfield\";\nimport { paintSpaceShip, SpaceShip$ } from \"./hero\";\nimport { paintEnemies, Enemies$ } from \"./enemy\";\nimport { paintHeroShots, HeroShots$ } from \"./hero_shots\";\nimport { paintScore, Score$ } from \"./score\";\nimport { collision } from \"../Helpers\";\nimport { SPEED } from \"../Constants\";\n\nfunction renderScene(actors) {\n  paintStars(actors.stars);\n  paintSpaceShip(actors.spaceship.x, actors.spaceship.y);\n  paintEnemies(actors.enemies);\n  paintHeroShots(actors.heroShots, actors.enemies);\n  paintScore(actors.score);\n}\n\nfunction gameOver(ship, enemies) {\n  return enemies.some(enemy => {\n    return (\n      collision(ship, enemy) || enemy.shots.some(shot => collision(ship, shot))\n    );\n  });\n}\n\nconst Game = Observable.combineLatest(\n  StarStream$,\n  SpaceShip$,\n  Enemies$,\n  HeroShots$,\n  Score$,\n  (stars, spaceship, enemies, heroShots, score) => ({\n    stars,\n    spaceship,\n    enemies,\n    heroShots,\n    score\n  })\n)\n  .sampleTime(SPEED)\n  .takeWhile(actors => !gameOver(actors.spaceship, actors.enemies));\n\nGame.subscribe(renderScene);\n"],"sourceRoot":""}